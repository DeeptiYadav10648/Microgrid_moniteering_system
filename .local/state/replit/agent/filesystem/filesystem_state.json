{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Energy Management System\n\n## Overview\n\nThis is a comprehensive energy management system built as a full-stack web application for monitoring and controlling renewable energy systems. The application provides real-time monitoring of solar panels, wind turbines, battery storage, and household energy consumption through an intuitive dashboard interface.\n\nThe system features live energy flow visualization, battery health monitoring, grid status tracking, alert management, and detailed analytics with historical data trends. Users can control battery charging schedules, optimize energy usage, and access comprehensive reporting for energy generation and consumption patterns.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\nThe client-side is built with React using Vite as the build tool and development server. The application uses a component-based architecture with shadcn/ui components for consistent UI design and Tailwind CSS for styling with a dark theme configuration.\n\n**State Management**: React Query (@tanstack/react-query) handles server state management, caching, and API data synchronization with automatic refetching intervals for real-time updates.\n\n**Routing**: Uses Wouter for lightweight client-side routing with dedicated pages for Dashboard, Alerts, Household Usage, Control Panel, Reports, Settings, and Help.\n\n**UI Components**: Radix UI primitives provide accessible, unstyled components that are styled with Tailwind CSS through the shadcn/ui system, ensuring consistent design patterns and accessibility standards.\n\n### Backend Architecture\nThe server is built with Express.js using TypeScript and ESM modules. It follows a modular structure with separate route handlers and storage abstraction.\n\n**Data Layer**: Currently uses an in-memory storage implementation (MemStorage) that can be easily swapped with a database-backed implementation through the IStorage interface. The system is configured for PostgreSQL with Drizzle ORM.\n\n**API Design**: RESTful API endpoints handle energy data CRUD operations, alerts management, and system control commands. All endpoints include proper error handling and data validation using Zod schemas.\n\n**Real-time Updates**: The API supports frequent polling with optimized response caching and includes middleware for request logging and performance monitoring.\n\n### Data Storage Solutions\nThe application uses Drizzle ORM with PostgreSQL for production data persistence. The schema defines three main entities:\n\n**Energy Data**: Stores comprehensive energy metrics including solar/wind generation, battery status, grid information, and household consumption with timestamps.\n\n**Alerts**: Manages system notifications with categorization (info, warning, error, success) and read status tracking.\n\n**Users**: Basic user management structure for future authentication implementation.\n\nThe current implementation includes a memory-based storage adapter with sample data for development and testing purposes.\n\n### Authentication and Authorization\nThe system currently includes basic user schema structure but authentication is not actively implemented. The infrastructure is prepared for session-based authentication with connect-pg-simple for PostgreSQL session storage.\n\n## External Dependencies\n\n### Database\n- **Neon Database**: Configured for PostgreSQL hosting with connection pooling\n- **Drizzle ORM**: Type-safe database queries and migrations\n- **connect-pg-simple**: PostgreSQL session store for Express sessions\n\n### UI and Styling\n- **Tailwind CSS**: Utility-first CSS framework with custom dark theme configuration\n- **Radix UI**: Accessible, unstyled UI primitives for complex components\n- **Lucide React**: Icon library for consistent iconography\n- **Recharts**: Charting library for data visualization and analytics\n\n### Development Tools\n- **Vite**: Fast build tool and development server with HMR\n- **TypeScript**: Static type checking across the entire codebase\n- **Replit Integration**: Development environment integration with error overlay and debugging tools\n\n### Runtime and Deployment\n- **Node.js**: Runtime environment with ESM support\n- **esbuild**: Fast bundler for production builds\n- **Express.js**: Web framework for API and static file serving","size_bytes":4323},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2766},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { insertEnergyDataSchema, insertAlertSchema } from \"@shared/schema\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Get current energy data\n  app.get(\"/api/energy/current\", async (req, res) => {\n    try {\n      const data = await storage.getCurrentEnergyData();\n      res.json(data);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch current energy data\" });\n    }\n  });\n\n  // Get energy data history\n  app.get(\"/api/energy/history\", async (req, res) => {\n    try {\n      const hours = parseInt(req.query.hours as string) || 24;\n      const data = await storage.getEnergyDataHistory(hours);\n      res.json(data);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch energy data history\" });\n    }\n  });\n\n  // Create new energy data point\n  app.post(\"/api/energy\", async (req, res) => {\n    try {\n      const validatedData = insertEnergyDataSchema.parse(req.body);\n      const data = await storage.createEnergyData(validatedData);\n      res.json(data);\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid energy data\" });\n    }\n  });\n\n  // Get alerts\n  app.get(\"/api/alerts\", async (req, res) => {\n    try {\n      const limit = parseInt(req.query.limit as string) || 10;\n      const alerts = await storage.getAlerts(limit);\n      res.json(alerts);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch alerts\" });\n    }\n  });\n\n  // Create new alert\n  app.post(\"/api/alerts\", async (req, res) => {\n    try {\n      const validatedAlert = insertAlertSchema.parse(req.body);\n      const alert = await storage.createAlert(validatedAlert);\n      res.json(alert);\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid alert data\" });\n    }\n  });\n\n  // Mark alert as read\n  app.patch(\"/api/alerts/:id/read\", async (req, res) => {\n    try {\n      const alert = await storage.markAlertAsRead(req.params.id);\n      if (!alert) {\n        return res.status(404).json({ message: \"Alert not found\" });\n      }\n      res.json(alert);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to update alert\" });\n    }\n  });\n\n  // Simulate real-time data updates\n  app.post(\"/api/energy/simulate\", async (req, res) => {\n    try {\n      const current = await storage.getCurrentEnergyData();\n      if (!current) {\n        return res.status(404).json({ message: \"No current data found\" });\n      }\n\n      // Generate realistic fluctuations\n      const newData = {\n        solarGeneration: Math.max(0, current.solarGeneration + (Math.random() - 0.5) * 2),\n        windGeneration: Math.max(0, current.windGeneration + (Math.random() - 0.5) * 1.5),\n        batteryLevel: Math.max(0, Math.min(100, current.batteryLevel + (Math.random() - 0.5) * 1)),\n        batteryHealth: current.batteryHealth,\n        batteryTemperature: Math.max(15, Math.min(35, current.batteryTemperature + (Math.random() - 0.5) * 0.5)),\n        batteryCycles: current.batteryCycles,\n        gridStatus: Math.random() > 0.05, // 95% uptime\n        gridLoad: Math.max(0, Math.min(100, current.gridLoad + (Math.random() - 0.5) * 5)),\n        gridFrequency: 50 + (Math.random() - 0.5) * 0.1,\n        householdConsumption: Math.max(0, current.householdConsumption + (Math.random() - 0.5) * 1),\n        totalGeneration: 0,\n        totalConsumption: 0,\n        efficiency: 0,\n      };\n\n      newData.totalGeneration = newData.solarGeneration + newData.windGeneration;\n      newData.totalConsumption = newData.householdConsumption;\n      newData.efficiency = newData.totalConsumption > 0 \n        ? Math.min(100, (newData.totalGeneration / newData.totalConsumption) * 100) \n        : 100;\n\n      const data = await storage.createEnergyData(newData);\n      res.json(data);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to simulate data\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":4058},"server/storage.ts":{"content":"import { type User, type InsertUser, type EnergyData, type InsertEnergyData, type Alert, type InsertAlert } from \"@shared/schema\";\nimport { randomUUID } from \"crypto\";\n\nexport interface IStorage {\n  getUser(id: string): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n  \n  getCurrentEnergyData(): Promise<EnergyData | undefined>;\n  getEnergyDataHistory(hours?: number): Promise<EnergyData[]>;\n  createEnergyData(data: InsertEnergyData): Promise<EnergyData>;\n  \n  getAlerts(limit?: number): Promise<Alert[]>;\n  createAlert(alert: InsertAlert): Promise<Alert>;\n  markAlertAsRead(id: string): Promise<Alert | undefined>;\n}\n\nexport class MemStorage implements IStorage {\n  private users: Map<string, User>;\n  private energyData: Map<string, EnergyData>;\n  private alerts: Map<string, Alert>;\n\n  constructor() {\n    this.users = new Map();\n    this.energyData = new Map();\n    this.alerts = new Map();\n    \n    // Initialize with some sample data\n    this.initializeSampleData();\n  }\n\n  private initializeSampleData() {\n    // Create initial energy data point\n    const initialEnergyData: EnergyData = {\n      id: randomUUID(),\n      timestamp: new Date(),\n      solarGeneration: 12.3,\n      windGeneration: 8.7,\n      batteryLevel: 84,\n      batteryHealth: 96,\n      batteryTemperature: 23,\n      batteryCycles: 1247,\n      gridStatus: true,\n      gridLoad: 67,\n      gridFrequency: 50.02,\n      householdConsumption: 6.8,\n      totalGeneration: 21.0,\n      totalConsumption: 6.8,\n      efficiency: 92.6,\n    };\n    this.energyData.set(initialEnergyData.id, initialEnergyData);\n\n    // Create sample alerts\n    const alerts: Alert[] = [\n      {\n        id: randomUUID(),\n        title: \"Battery temperature elevated\",\n        message: \"Battery temperature is above normal range\",\n        type: \"warning\",\n        timestamp: new Date(Date.now() - 2 * 60 * 1000),\n        isRead: false,\n      },\n      {\n        id: randomUUID(),\n        title: \"Peak generation reached\",\n        message: \"Solar panels reached maximum output capacity\",\n        type: \"info\",\n        timestamp: new Date(Date.now() - 15 * 60 * 1000),\n        isRead: false,\n      },\n      {\n        id: randomUUID(),\n        title: \"System optimization complete\",\n        message: \"Energy system optimization has been completed successfully\",\n        type: \"success\",\n        timestamp: new Date(Date.now() - 60 * 60 * 1000),\n        isRead: false,\n      },\n    ];\n\n    alerts.forEach(alert => this.alerts.set(alert.id, alert));\n  }\n\n  async getUser(id: string): Promise<User | undefined> {\n    return this.users.get(id);\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    return Array.from(this.users.values()).find(\n      (user) => user.username === username,\n    );\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const id = randomUUID();\n    const user: User = { ...insertUser, id };\n    this.users.set(id, user);\n    return user;\n  }\n\n  async getCurrentEnergyData(): Promise<EnergyData | undefined> {\n    const dataArray = Array.from(this.energyData.values());\n    return dataArray.sort((a, b) => b.timestamp.getTime() - a.timestamp.getTime())[0];\n  }\n\n  async getEnergyDataHistory(hours: number = 24): Promise<EnergyData[]> {\n    const now = new Date();\n    const cutoff = new Date(now.getTime() - hours * 60 * 60 * 1000);\n    \n    return Array.from(this.energyData.values())\n      .filter(data => data.timestamp >= cutoff)\n      .sort((a, b) => a.timestamp.getTime() - b.timestamp.getTime());\n  }\n\n  async createEnergyData(insertData: InsertEnergyData): Promise<EnergyData> {\n    const id = randomUUID();\n    const data: EnergyData = { \n      ...insertData, \n      id, \n      timestamp: new Date(),\n    };\n    this.energyData.set(id, data);\n    return data;\n  }\n\n  async getAlerts(limit: number = 10): Promise<Alert[]> {\n    return Array.from(this.alerts.values())\n      .sort((a, b) => b.timestamp.getTime() - a.timestamp.getTime())\n      .slice(0, limit);\n  }\n\n  async createAlert(insertAlert: InsertAlert): Promise<Alert> {\n    const id = randomUUID();\n    const alert: Alert = { \n      ...insertAlert, \n      id, \n      timestamp: new Date(),\n      isRead: false,\n    };\n    this.alerts.set(id, alert);\n    return alert;\n  }\n\n  async markAlertAsRead(id: string): Promise<Alert | undefined> {\n    const alert = this.alerts.get(id);\n    if (alert) {\n      alert.isRead = true;\n      this.alerts.set(id, alert);\n    }\n    return alert;\n  }\n}\n\nexport const storage = new MemStorage();\n","size_bytes":4596},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, real, integer, timestamp, boolean } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  username: text(\"username\").notNull().unique(),\n  password: text(\"password\").notNull(),\n});\n\nexport const energyData = pgTable(\"energy_data\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  timestamp: timestamp(\"timestamp\").notNull().defaultNow(),\n  solarGeneration: real(\"solar_generation\").notNull().default(0),\n  windGeneration: real(\"wind_generation\").notNull().default(0),\n  batteryLevel: real(\"battery_level\").notNull().default(0),\n  batteryHealth: real(\"battery_health\").notNull().default(100),\n  batteryTemperature: real(\"battery_temperature\").notNull().default(25),\n  batteryCycles: integer(\"battery_cycles\").notNull().default(0),\n  gridStatus: boolean(\"grid_status\").notNull().default(true),\n  gridLoad: real(\"grid_load\").notNull().default(0),\n  gridFrequency: real(\"grid_frequency\").notNull().default(50),\n  householdConsumption: real(\"household_consumption\").notNull().default(0),\n  totalGeneration: real(\"total_generation\").notNull().default(0),\n  totalConsumption: real(\"total_consumption\").notNull().default(0),\n  efficiency: real(\"efficiency\").notNull().default(0),\n});\n\nexport const alerts = pgTable(\"alerts\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  title: text(\"title\").notNull(),\n  message: text(\"message\").notNull(),\n  type: text(\"type\").notNull(), // info, warning, error, success\n  timestamp: timestamp(\"timestamp\").notNull().defaultNow(),\n  isRead: boolean(\"is_read\").notNull().default(false),\n});\n\nexport const insertUserSchema = createInsertSchema(users).pick({\n  username: true,\n  password: true,\n});\n\nexport const insertEnergyDataSchema = createInsertSchema(energyData).omit({\n  id: true,\n  timestamp: true,\n});\n\nexport const insertAlertSchema = createInsertSchema(alerts).omit({\n  id: true,\n  timestamp: true,\n  isRead: true,\n});\n\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type User = typeof users.$inferSelect;\nexport type EnergyData = typeof energyData.$inferSelect;\nexport type InsertEnergyData = z.infer<typeof insertEnergyDataSchema>;\nexport type Alert = typeof alerts.$inferSelect;\nexport type InsertAlert = z.infer<typeof insertAlertSchema>;\n","size_bytes":2468},"client/src/App.js":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport Sidebar from \"./components/Sidebar\";\nimport Header from \"./components/Header\";\nimport Dashboard from \"./pages/Dashboard\";\nimport Alerts from \"./pages/Alerts\";\nimport Household from \"./pages/Household\";\nimport Control from \"./pages/Control\";\nimport Reports from \"./pages/Reports\";\nimport Settings from \"./pages/Settings\";\nimport Help from \"./pages/Help\";\nimport NotFound from \"./pages/not-found\";\nimport { useState } from \"react\";\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={Dashboard} />\n      <Route path=\"/alerts\" component={Alerts} />\n      <Route path=\"/household\" component={Household} />\n      <Route path=\"/control\" component={Control} />\n      <Route path=\"/reports\" component={Reports} />\n      <Route path=\"/settings\" component={Settings} />\n      <Route path=\"/help\" component={Help} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  const [isMobileNavOpen, setIsMobileNavOpen] = useState(false);\n\n  const toggleMobileNav = () => {\n    setIsMobileNavOpen(!isMobileNavOpen);\n  };\n\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <div className=\"flex h-screen overflow-hidden bg-background\">\n          <Sidebar isMobileNavOpen={isMobileNavOpen} toggleMobileNav={toggleMobileNav} />\n          <main className=\"flex-1 overflow-auto\">\n            <Header toggleMobileNav={toggleMobileNav} />\n            <div className=\"p-6\">\n              <Router />\n            </div>\n          </main>\n        </div>\n        <Toaster />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":1883},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction Router() {\n  return (\n    <Switch>\n      {/* Add pages below */}\n      {/* <Route path=\"/\" component={Home}/> */}\n      {/* Fallback to 404 */}\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <Toaster />\n        <Router />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":733},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(222, 84%, 5%);\n  --foreground: hsl(210, 40%, 98%);\n  --card: hsl(222, 84%, 8%);\n  --card-foreground: hsl(210, 40%, 98%);\n  --popover: hsl(222, 84%, 8%);\n  --popover-foreground: hsl(210, 40%, 98%);\n  --primary: hsl(217, 91%, 60%);\n  --primary-foreground: hsl(222, 84%, 5%);\n  --secondary: hsl(217, 32%, 17%);\n  --secondary-foreground: hsl(210, 40%, 98%);\n  --muted: hsl(217, 32%, 17%);\n  --muted-foreground: hsl(215, 20%, 65%);\n  --accent: hsl(217, 32%, 17%);\n  --accent-foreground: hsl(210, 40%, 98%);\n  --destructive: hsl(0, 84%, 60%);\n  --destructive-foreground: hsl(210, 40%, 98%);\n  --border: hsl(217, 32%, 17%);\n  --input: hsl(217, 32%, 17%);\n  --ring: hsl(212, 72%, 59%);\n  --chart-1: hsl(217, 91%, 60%);\n  --chart-2: hsl(142, 76%, 36%);\n  --chart-3: hsl(45, 93%, 58%);\n  --chart-4: hsl(201, 96%, 32%);\n  --chart-5: hsl(262, 83%, 58%);\n  --sidebar: hsl(222, 84%, 8%);\n  --sidebar-foreground: hsl(210, 40%, 98%);\n  --sidebar-primary: hsl(217, 91%, 60%);\n  --sidebar-primary-foreground: hsl(222, 84%, 5%);\n  --sidebar-accent: hsl(217, 32%, 17%);\n  --sidebar-accent-foreground: hsl(210, 40%, 98%);\n  --sidebar-border: hsl(217, 32%, 17%);\n  --sidebar-ring: hsl(212, 72%, 59%);\n  --font-sans: 'Inter', ui-sans-serif, system-ui;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 0.75rem;\n  --shadow-2xs: 0px 2px 0px 0px hsl(217, 91%, 60%, 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(217, 91%, 60%, 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(217, 91%, 60%, 0.00), 0px 1px 2px -1px hsl(217, 91%, 60%, 0.00);\n  --shadow: 0px 2px 0px 0px hsl(217, 91%, 60%, 0.00), 0px 1px 2px -1px hsl(217, 91%, 60%, 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(217, 91%, 60%, 0.00), 0px 2px 4px -1px hsl(217, 91%, 60%, 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(217, 91%, 60%, 0.00), 0px 4px 6px -1px hsl(217, 91%, 60%, 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(217, 91%, 60%, 0.00), 0px 8px 10px -1px hsl(217, 91%, 60%, 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(217, 91%, 60%, 0.00);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n  \n  /* Custom energy colors */\n  --energy-solar: hsl(45, 93%, 58%);\n  --energy-wind: hsl(201, 96%, 32%);\n  --energy-battery: hsl(142, 76%, 36%);\n  --energy-grid: hsl(262, 83%, 58%);\n  --energy-consumption: hsl(0, 84%, 60%);\n}\n\n.dark {\n  --background: hsl(222, 84%, 5%);\n  --foreground: hsl(210, 40%, 98%);\n  --card: hsl(222, 84%, 8%);\n  --card-foreground: hsl(210, 40%, 98%);\n  --popover: hsl(222, 84%, 8%);\n  --popover-foreground: hsl(210, 40%, 98%);\n  --primary: hsl(217, 91%, 60%);\n  --primary-foreground: hsl(222, 84%, 5%);\n  --secondary: hsl(217, 32%, 17%);\n  --secondary-foreground: hsl(210, 40%, 98%);\n  --muted: hsl(217, 32%, 17%);\n  --muted-foreground: hsl(215, 20%, 65%);\n  --accent: hsl(217, 32%, 17%);\n  --accent-foreground: hsl(210, 40%, 98%);\n  --destructive: hsl(0, 84%, 60%);\n  --destructive-foreground: hsl(210, 40%, 98%);\n  --border: hsl(217, 32%, 17%);\n  --input: hsl(217, 32%, 17%);\n  --ring: hsl(212, 72%, 59%);\n  --chart-1: hsl(217, 91%, 60%);\n  --chart-2: hsl(142, 76%, 36%);\n  --chart-3: hsl(45, 93%, 58%);\n  --chart-4: hsl(201, 96%, 32%);\n  --chart-5: hsl(262, 83%, 58%);\n  --sidebar: hsl(222, 84%, 8%);\n  --sidebar-foreground: hsl(210, 40%, 98%);\n  --sidebar-primary: hsl(217, 91%, 60%);\n  --sidebar-primary-foreground: hsl(222, 84%, 5%);\n  --sidebar-accent: hsl(217, 32%, 17%);\n  --sidebar-accent-foreground: hsl(210, 40%, 98%);\n  --sidebar-border: hsl(217, 32%, 17%);\n  --sidebar-ring: hsl(212, 72%, 59%);\n  --font-sans: 'Inter', ui-sans-serif, system-ui;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 0.75rem;\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}\n\n.energy-flow-line {\n  stroke: var(--primary);\n  stroke-width: 3;\n  stroke-dasharray: 10,5;\n  animation: flow 2s linear infinite;\n}\n\n@keyframes flow {\n  0% { stroke-dashoffset: 0; }\n  100% { stroke-dashoffset: 15; }\n}\n\n.status-indicator {\n  width: 12px;\n  height: 12px;\n  border-radius: 50%;\n  display: inline-block;\n  margin-right: 8px;\n}\n\n.status-online { \n  background: var(--energy-battery); \n}\n\n.status-offline { \n  background: var(--destructive); \n}\n\n.status-warning { \n  background: var(--energy-solar); \n}\n","size_bytes":4340},"client/src/main.js":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")).render(<App />);\n","size_bytes":156},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/BatteryStatus.js":{"content":"import { useQuery } from \"@tanstack/react-query\";\n\nexport default function BatteryStatus() {\n  const { data: energyData } = useQuery({\n    queryKey: [\"/api/energy/current\"],\n    refetchInterval: 5000,\n  });\n\n  if (!energyData) {\n    return (\n      <div className=\"bg-card border border-border rounded-lg p-6\">\n        <h3 className=\"text-lg font-semibold mb-4\">Battery Status & Health</h3>\n        <div className=\"space-y-4 animate-pulse\">\n          <div className=\"h-4 bg-muted rounded w-full\"></div>\n          <div className=\"h-4 bg-muted rounded w-3/4\"></div>\n          <div className=\"h-4 bg-muted rounded w-1/2\"></div>\n        </div>\n      </div>\n    );\n  }\n\n  const getHealthColor = (health) => {\n    if (health >= 90) return \"bg-green-500\";\n    if (health >= 70) return \"bg-yellow-500\";\n    return \"bg-red-500\";\n  };\n\n  const getHealthText = (health) => {\n    if (health >= 90) return \"Excellent\";\n    if (health >= 70) return \"Good\";\n    return \"Fair\";\n  };\n\n  const estimatedRuntime = (energyData.batteryLevel * 0.18 / energyData.householdConsumption).toFixed(1);\n\n  return (\n    <div className=\"bg-card border border-border rounded-lg p-6\" data-testid=\"card-battery-status\">\n      <h3 className=\"text-lg font-semibold mb-4\">Battery Status & Health</h3>\n      <div className=\"space-y-4\">\n        {/* Battery Level Progress */}\n        <div>\n          <div className=\"flex justify-between text-sm mb-2\">\n            <span>Current Level</span>\n            <span data-testid=\"text-battery-percentage\">{energyData.batteryLevel.toFixed(0)}%</span>\n          </div>\n          <div className=\"w-full bg-muted rounded-full h-3\">\n            <div \n              className=\"bg-green-500 h-3 rounded-full transition-all duration-300\" \n              style={{ width: `${energyData.batteryLevel}%` }}\n            ></div>\n          </div>\n        </div>\n        \n        {/* Battery Health */}\n        <div>\n          <div className=\"flex justify-between text-sm mb-2\">\n            <span>Health Status</span>\n            <span className=\"text-green-400\" data-testid=\"text-battery-health\">\n              {getHealthText(energyData.batteryHealth)}\n            </span>\n          </div>\n          <div className=\"w-full bg-muted rounded-full h-3\">\n            <div \n              className={`${getHealthColor(energyData.batteryHealth)} h-3 rounded-full transition-all duration-300`}\n              style={{ width: `${energyData.batteryHealth}%` }}\n            ></div>\n          </div>\n        </div>\n        \n        {/* Temperature */}\n        <div className=\"flex justify-between py-2 border-t border-border\">\n          <span className=\"text-sm text-muted-foreground\">Temperature</span>\n          <span className=\"text-sm\" data-testid=\"text-battery-temperature\">\n            {energyData.batteryTemperature.toFixed(1)}°C\n          </span>\n        </div>\n        \n        {/* Cycles */}\n        <div className=\"flex justify-between py-2\">\n          <span className=\"text-sm text-muted-foreground\">Charge Cycles</span>\n          <span className=\"text-sm\" data-testid=\"text-battery-cycles\">\n            {energyData.batteryCycles.toLocaleString()}\n          </span>\n        </div>\n        \n        {/* Estimated Runtime */}\n        <div className=\"flex justify-between py-2\">\n          <span className=\"text-sm text-muted-foreground\">Est. Runtime</span>\n          <span className=\"text-sm\" data-testid=\"text-battery-runtime\">\n            {estimatedRuntime} hours\n          </span>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":3513},"client/src/components/EnergyFlow.js":{"content":"import { useQuery } from \"@tanstack/react-query\";\n\nexport default function EnergyFlow() {\n  const { data: energyData } = useQuery({\n    queryKey: [\"/api/energy/current\"],\n    refetchInterval: 5000, // Refresh every 5 seconds\n  });\n\n  if (!energyData) {\n    return (\n      <div className=\"bg-card border border-border rounded-lg p-6\">\n        <h3 className=\"text-lg font-semibold mb-6\">Live Energy Flow</h3>\n        <div className=\"h-64 flex items-center justify-center\">\n          <p className=\"text-muted-foreground\">Loading energy flow data...</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"bg-card border border-border rounded-lg p-6\">\n      <h3 className=\"text-lg font-semibold mb-6\">Live Energy Flow</h3>\n      <div className=\"relative\">\n        <svg viewBox=\"0 0 800 300\" className=\"w-full h-64\">\n          {/* Solar Panel */}\n          <g transform=\"translate(50, 50)\">\n            <rect x=\"0\" y=\"0\" width=\"80\" height=\"60\" rx=\"8\" fill=\"hsl(45 93% 58%)\" stroke=\"hsl(42 91% 50%)\" strokeWidth=\"2\"/>\n            <text x=\"40\" y=\"30\" textAnchor=\"middle\" fill=\"hsl(222 84% 5%)\" fontSize=\"12\" fontWeight=\"600\">Solar</text>\n            <text x=\"40\" y=\"45\" textAnchor=\"middle\" fill=\"hsl(222 84% 5%)\" fontSize=\"10\" data-testid=\"text-solar-output\">\n              {energyData.solarGeneration.toFixed(1)} kW\n            </text>\n          </g>\n          \n          {/* Wind Turbine */}\n          <g transform=\"translate(50, 150)\">\n            <rect x=\"0\" y=\"0\" width=\"80\" height=\"60\" rx=\"8\" fill=\"hsl(201 96% 32%)\" stroke=\"hsl(201 96% 25%)\" strokeWidth=\"2\"/>\n            <text x=\"40\" y=\"30\" textAnchor=\"middle\" fill=\"white\" fontSize=\"12\" fontWeight=\"600\">Wind</text>\n            <text x=\"40\" y=\"45\" textAnchor=\"middle\" fill=\"white\" fontSize=\"10\" data-testid=\"text-wind-output\">\n              {energyData.windGeneration.toFixed(1)} kW\n            </text>\n          </g>\n          \n          {/* Battery Storage */}\n          <g transform=\"translate(350, 100)\">\n            <rect x=\"0\" y=\"0\" width=\"100\" height=\"80\" rx=\"8\" fill=\"hsl(142 76% 36%)\" stroke=\"hsl(142 76% 30%)\" strokeWidth=\"2\"/>\n            <text x=\"50\" y=\"35\" textAnchor=\"middle\" fill=\"white\" fontSize=\"12\" fontWeight=\"600\">Battery</text>\n            <text x=\"50\" y=\"50\" textAnchor=\"middle\" fill=\"white\" fontSize=\"10\" data-testid=\"text-battery-status\">\n              {energyData.batteryLevel.toFixed(0)}% | {(energyData.batteryLevel * 0.18).toFixed(1)} kWh\n            </text>\n            <text x=\"50\" y=\"65\" textAnchor=\"middle\" fill=\"white\" fontSize=\"10\">\n              {energyData.totalGeneration > energyData.totalConsumption ? 'Charging' : 'Discharging'}\n            </text>\n          </g>\n          \n          {/* Grid Connection */}\n          <g transform=\"translate(600, 50)\">\n            <rect x=\"0\" y=\"0\" width=\"80\" height=\"60\" rx=\"8\" fill=\"hsl(262 83% 58%)\" stroke=\"hsl(262 83% 50%)\" strokeWidth=\"2\"/>\n            <text x=\"40\" y=\"30\" textAnchor=\"middle\" fill=\"white\" fontSize=\"12\" fontWeight=\"600\">Grid</text>\n            <text x=\"40\" y=\"45\" textAnchor=\"middle\" fill=\"white\" fontSize=\"10\" data-testid=\"text-grid-status\">\n              {energyData.gridStatus ? 'Online' : 'Offline'}\n            </text>\n          </g>\n          \n          {/* Households */}\n          <g transform=\"translate(600, 150)\">\n            <rect x=\"0\" y=\"0\" width=\"80\" height=\"60\" rx=\"8\" fill=\"hsl(0 84% 60%)\" stroke=\"hsl(0 84% 50%)\" strokeWidth=\"2\"/>\n            <text x=\"40\" y=\"30\" textAnchor=\"middle\" fill=\"white\" fontSize=\"12\" fontWeight=\"600\">House</text>\n            <text x=\"40\" y=\"45\" textAnchor=\"middle\" fill=\"white\" fontSize=\"10\" data-testid=\"text-household-consumption\">\n              {energyData.householdConsumption.toFixed(1)} kW\n            </text>\n          </g>\n          \n          {/* Energy Flow Lines */}\n          <line x1=\"130\" y1=\"80\" x2=\"350\" y2=\"140\" className=\"energy-flow-line\"/>\n          <line x1=\"130\" y1=\"180\" x2=\"350\" y2=\"140\" className=\"energy-flow-line\"/>\n          <line x1=\"450\" y1=\"140\" x2=\"600\" y2=\"80\" className=\"energy-flow-line\"/>\n          <line x1=\"450\" y1=\"140\" x2=\"600\" y2=\"180\" className=\"energy-flow-line\"/>\n          \n          {/* Flow Direction Arrows */}\n          <polygon points=\"300,135 310,140 300,145\" fill=\"var(--primary)\"/>\n          <polygon points=\"550,135 560,140 550,145\" fill=\"var(--primary)\"/>\n        </svg>\n      </div>\n    </div>\n  );\n}\n","size_bytes":4371},"client/src/components/GenerationChart.js":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from \"recharts\";\n\nexport default function GenerationChart() {\n  const { data: historyData } = useQuery({\n    queryKey: [\"/api/energy/history\"],\n    refetchInterval: 60000, // Refresh every minute\n  });\n\n  if (!historyData || historyData.length === 0) {\n    return (\n      <div className=\"bg-card border border-border rounded-lg p-6\">\n        <h3 className=\"text-lg font-semibold mb-4\">Generation vs Consumption</h3>\n        <div className=\"h-64 flex items-center justify-center\">\n          <p className=\"text-muted-foreground\">Loading chart data...</p>\n        </div>\n      </div>\n    );\n  }\n\n  // Format data for chart\n  const chartData = historyData.slice(-24).map((data, index) => ({\n    time: new Date(data.timestamp).toLocaleTimeString('en-US', { \n      hour: '2-digit', \n      minute: '2-digit' \n    }),\n    generation: data.totalGeneration,\n    consumption: data.totalConsumption,\n    solar: data.solarGeneration,\n    wind: data.windGeneration,\n  }));\n\n  const customTooltip = ({ active, payload, label }) => {\n    if (active && payload && payload.length) {\n      return (\n        <div className=\"bg-card border border-border rounded-lg p-3 shadow-lg\">\n          <p className=\"text-sm font-medium\">{`Time: ${label}`}</p>\n          {payload.map((entry, index) => (\n            <p key={index} className=\"text-sm\" style={{ color: entry.color }}>\n              {`${entry.name}: ${entry.value.toFixed(1)} kW`}\n            </p>\n          ))}\n        </div>\n      );\n    }\n    return null;\n  };\n\n  return (\n    <div className=\"bg-card border border-border rounded-lg p-6\" data-testid=\"chart-generation-consumption\">\n      <h3 className=\"text-lg font-semibold mb-4\">Generation vs Consumption</h3>\n      <div className=\"h-64\">\n        <ResponsiveContainer width=\"100%\" height=\"100%\">\n          <LineChart data={chartData}>\n            <CartesianGrid strokeDasharray=\"3 3\" stroke=\"hsl(217 32% 17%)\" />\n            <XAxis \n              dataKey=\"time\" \n              stroke=\"hsl(215 20% 65%)\"\n              fontSize={12}\n              tick={{ fill: 'hsl(215 20% 65%)' }}\n            />\n            <YAxis \n              stroke=\"hsl(215 20% 65%)\"\n              fontSize={12}\n              tick={{ fill: 'hsl(215 20% 65%)' }}\n              label={{ value: 'kW', angle: -90, position: 'insideLeft', style: { textAnchor: 'middle', fill: 'hsl(215 20% 65%)' } }}\n            />\n            <Tooltip content={customTooltip} />\n            <Legend \n              wrapperStyle={{ color: 'hsl(215 20% 65%)' }}\n            />\n            <Line \n              type=\"monotone\" \n              dataKey=\"generation\" \n              stroke=\"hsl(217 91% 60%)\" \n              strokeWidth={2}\n              name=\"Total Generation\"\n              dot={false}\n            />\n            <Line \n              type=\"monotone\" \n              dataKey=\"consumption\" \n              stroke=\"hsl(0 84% 60%)\" \n              strokeWidth={2}\n              name=\"Consumption\"\n              dot={false}\n            />\n            <Line \n              type=\"monotone\" \n              dataKey=\"solar\" \n              stroke=\"hsl(45 93% 58%)\" \n              strokeWidth={1}\n              name=\"Solar\"\n              dot={false}\n              strokeDasharray=\"5 5\"\n            />\n            <Line \n              type=\"monotone\" \n              dataKey=\"wind\" \n              stroke=\"hsl(201 96% 32%)\" \n              strokeWidth={1}\n              name=\"Wind\"\n              dot={false}\n              strokeDasharray=\"5 5\"\n            />\n          </LineChart>\n        </ResponsiveContainer>\n      </div>\n    </div>\n  );\n}\n","size_bytes":3715},"client/src/components/GridStatus.js":{"content":"import { useQuery } from \"@tanstack/react-query\";\n\nexport default function GridStatus() {\n  const { data: energyData } = useQuery({\n    queryKey: [\"/api/energy/current\"],\n    refetchInterval: 5000,\n  });\n\n  if (!energyData) {\n    return (\n      <div className=\"bg-card border border-border rounded-lg p-6\">\n        <h3 className=\"text-lg font-semibold mb-4\">Grid Status</h3>\n        <div className=\"space-y-4 animate-pulse\">\n          <div className=\"h-4 bg-muted rounded w-full\"></div>\n          <div className=\"h-4 bg-muted rounded w-3/4\"></div>\n          <div className=\"h-4 bg-muted rounded w-1/2\"></div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"bg-card border border-border rounded-lg p-6\" data-testid=\"card-grid-status\">\n      <h3 className=\"text-lg font-semibold mb-4\">Grid Status</h3>\n      <div className=\"space-y-4\">\n        <div className=\"flex items-center justify-between\">\n          <span className=\"text-sm text-muted-foreground\">Connection Status</span>\n          <div className=\"flex items-center\">\n            <span \n              className={`w-3 h-3 rounded-full mr-2 ${\n                energyData.gridStatus ? 'bg-green-500' : 'bg-red-500'\n              }`}\n            ></span>\n            <span \n              className={`text-sm ${\n                energyData.gridStatus ? 'text-green-400' : 'text-red-400'\n              }`}\n              data-testid=\"text-grid-connection-status\"\n            >\n              {energyData.gridStatus ? 'Online' : 'Offline'}\n            </span>\n          </div>\n        </div>\n        \n        <div className=\"flex items-center justify-between\">\n          <span className=\"text-sm text-muted-foreground\">Load Percentage</span>\n          <span className=\"text-sm font-medium\" data-testid=\"text-grid-load-percentage\">\n            {energyData.gridLoad.toFixed(0)}%\n          </span>\n        </div>\n        \n        <div>\n          <div className=\"flex justify-between text-sm mb-2\">\n            <span>Grid Load</span>\n            <span data-testid=\"text-grid-load\">{energyData.gridLoad.toFixed(0)}%</span>\n          </div>\n          <div className=\"w-full bg-muted rounded-full h-2\">\n            <div \n              className=\"bg-primary h-2 rounded-full transition-all duration-300\" \n              style={{ width: `${energyData.gridLoad}%` }}\n            ></div>\n          </div>\n        </div>\n        \n        <div className=\"flex items-center justify-between pt-2 border-t border-border\">\n          <span className=\"text-sm text-muted-foreground\">Frequency</span>\n          <span className=\"text-sm\" data-testid=\"text-grid-frequency\">\n            {energyData.gridFrequency.toFixed(2)} Hz\n          </span>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":2736},"client/src/components/Header.js":{"content":"import { useState, useEffect } from \"react\";\nimport { Menu, Bell } from \"lucide-react\";\nimport { useQuery } from \"@tanstack/react-query\";\n\nexport default function Header({ toggleMobileNav }) {\n  const [currentTime, setCurrentTime] = useState(new Date());\n\n  const { data: alerts } = useQuery({\n    queryKey: [\"/api/alerts\"],\n    refetchInterval: 30000, // Refresh every 30 seconds\n  });\n\n  useEffect(() => {\n    const timer = setInterval(() => {\n      setCurrentTime(new Date());\n    }, 1000);\n\n    return () => clearInterval(timer);\n  }, []);\n\n  const unreadAlertsCount = alerts?.filter(alert => !alert.isRead).length || 0;\n\n  return (\n    <header className=\"bg-card border-b border-border p-4 flex items-center justify-between\">\n      <div className=\"flex items-center\">\n        <button \n          onClick={toggleMobileNav} \n          className=\"lg:hidden p-2 hover:bg-accent rounded-lg mr-4\"\n          data-testid=\"button-toggle-mobile-nav\"\n        >\n          <Menu className=\"w-6 h-6\" />\n        </button>\n        <h2 className=\"text-2xl font-semibold\" data-testid=\"text-page-title\">\n          Dashboard\n        </h2>\n      </div>\n      \n      <div className=\"flex items-center space-x-4\">\n        <div className=\"text-sm text-muted-foreground\" data-testid=\"text-current-time\">\n          {currentTime.toLocaleString()}\n        </div>\n        <button \n          className=\"p-2 hover:bg-accent rounded-lg relative\"\n          data-testid=\"button-notifications\"\n        >\n          <Bell className=\"w-6 h-6\" />\n          {unreadAlertsCount > 0 && (\n            <span \n              className=\"absolute -top-1 -right-1 bg-destructive text-destructive-foreground text-xs w-5 h-5 rounded-full flex items-center justify-center\"\n              data-testid=\"text-notification-count\"\n            >\n              {unreadAlertsCount}\n            </span>\n          )}\n        </button>\n        <div className=\"w-8 h-8 bg-primary rounded-full flex items-center justify-center\">\n          <span className=\"text-sm font-medium text-primary-foreground\" data-testid=\"text-user-initials\">\n            JD\n          </span>\n        </div>\n      </div>\n    </header>\n  );\n}\n","size_bytes":2155},"client/src/components/RecentAlerts.js":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { AlertTriangle, Info, CheckCircle } from \"lucide-react\";\n\nexport default function RecentAlerts() {\n  const { data: alerts } = useQuery({\n    queryKey: [\"/api/alerts\"],\n    refetchInterval: 30000,\n  });\n\n  if (!alerts) {\n    return (\n      <div className=\"bg-card border border-border rounded-lg p-6\">\n        <h3 className=\"text-lg font-semibold mb-4\">Recent Alerts</h3>\n        <div className=\"space-y-3 animate-pulse\">\n          <div className=\"h-16 bg-muted rounded-lg\"></div>\n          <div className=\"h-16 bg-muted rounded-lg\"></div>\n          <div className=\"h-16 bg-muted rounded-lg\"></div>\n        </div>\n      </div>\n    );\n  }\n\n  const getAlertIcon = (type) => {\n    switch (type) {\n      case 'warning':\n        return AlertTriangle;\n      case 'info':\n        return Info;\n      case 'success':\n        return CheckCircle;\n      default:\n        return Info;\n    }\n  };\n\n  const getAlertStyles = (type) => {\n    switch (type) {\n      case 'warning':\n        return {\n          bg: 'bg-yellow-500/10',\n          border: 'border-yellow-500/20',\n          iconColor: 'text-yellow-500'\n        };\n      case 'info':\n        return {\n          bg: 'bg-blue-500/10',\n          border: 'border-blue-500/20',\n          iconColor: 'text-blue-500'\n        };\n      case 'success':\n        return {\n          bg: 'bg-green-500/10',\n          border: 'border-green-500/20',\n          iconColor: 'text-green-500'\n        };\n      case 'error':\n        return {\n          bg: 'bg-red-500/10',\n          border: 'border-red-500/20',\n          iconColor: 'text-red-500'\n        };\n      default:\n        return {\n          bg: 'bg-blue-500/10',\n          border: 'border-blue-500/20',\n          iconColor: 'text-blue-500'\n        };\n    }\n  };\n\n  const getTimeAgo = (timestamp) => {\n    const now = new Date();\n    const alertTime = new Date(timestamp);\n    const diffInMinutes = Math.floor((now - alertTime) / (1000 * 60));\n    \n    if (diffInMinutes < 1) return 'Just now';\n    if (diffInMinutes < 60) return `${diffInMinutes} minutes ago`;\n    \n    const diffInHours = Math.floor(diffInMinutes / 60);\n    if (diffInHours < 24) return `${diffInHours} hour${diffInHours > 1 ? 's' : ''} ago`;\n    \n    const diffInDays = Math.floor(diffInHours / 24);\n    return `${diffInDays} day${diffInDays > 1 ? 's' : ''} ago`;\n  };\n\n  return (\n    <div className=\"bg-card border border-border rounded-lg p-6\" data-testid=\"card-recent-alerts\">\n      <h3 className=\"text-lg font-semibold mb-4\">Recent Alerts</h3>\n      <div className=\"space-y-3\">\n        {alerts.slice(0, 3).map((alert) => {\n          const Icon = getAlertIcon(alert.type);\n          const styles = getAlertStyles(alert.type);\n          \n          return (\n            <div \n              key={alert.id} \n              className={`flex items-start p-3 ${styles.bg} border ${styles.border} rounded-lg`}\n              data-testid={`alert-${alert.type}`}\n            >\n              <Icon className={`w-5 h-5 ${styles.iconColor} mr-3 mt-0.5`} />\n              <div className=\"flex-1\">\n                <p className=\"text-sm font-medium\" data-testid=\"text-alert-title\">\n                  {alert.title}\n                </p>\n                <p className=\"text-xs text-muted-foreground\" data-testid=\"text-alert-time\">\n                  {getTimeAgo(alert.timestamp)}\n                </p>\n              </div>\n            </div>\n          );\n        })}\n        \n        {alerts.length === 0 && (\n          <div className=\"text-center py-8\">\n            <p className=\"text-muted-foreground\">No recent alerts</p>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n","size_bytes":3668},"client/src/components/RenewableStatus.js":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Sun, Wind } from \"lucide-react\";\n\nexport default function RenewableStatus() {\n  const { data: energyData } = useQuery({\n    queryKey: [\"/api/energy/current\"],\n    refetchInterval: 5000,\n  });\n\n  if (!energyData) {\n    return (\n      <div className=\"bg-card border border-border rounded-lg p-6\">\n        <h3 className=\"text-lg font-semibold mb-4\">Renewable Sources</h3>\n        <div className=\"space-y-4 animate-pulse\">\n          <div className=\"h-16 bg-muted rounded-lg\"></div>\n          <div className=\"h-16 bg-muted rounded-lg\"></div>\n        </div>\n      </div>\n    );\n  }\n\n  const maxSolar = 15.2; // Peak capacity\n  const maxWind = 12.0; // Peak capacity\n\n  return (\n    <div className=\"bg-card border border-border rounded-lg p-6\" data-testid=\"card-renewable-status\">\n      <h3 className=\"text-lg font-semibold mb-4\">Renewable Sources</h3>\n      <div className=\"space-y-4\">\n        {/* Solar Status */}\n        <div className=\"flex items-center justify-between p-3 bg-yellow-500/10 rounded-lg\">\n          <div className=\"flex items-center\">\n            <Sun className=\"w-8 h-8 text-yellow-500 mr-3\" />\n            <div>\n              <p className=\"text-sm font-medium\">Solar Panels</p>\n              <p className=\"text-xs text-muted-foreground\">4 panels active</p>\n            </div>\n          </div>\n          <div className=\"text-right\">\n            <p className=\"text-sm font-bold text-yellow-500\" data-testid=\"text-solar-current\">\n              {energyData.solarGeneration.toFixed(1)} kW\n            </p>\n            <p className=\"text-xs text-muted-foreground\">Peak: {maxSolar} kW</p>\n          </div>\n        </div>\n        \n        {/* Wind Status */}\n        <div className=\"flex items-center justify-between p-3 bg-blue-500/10 rounded-lg\">\n          <div className=\"flex items-center\">\n            <Wind className=\"w-8 h-8 text-blue-500 mr-3\" />\n            <div>\n              <p className=\"text-sm font-medium\">Wind Turbine</p>\n              <p className=\"text-xs text-muted-foreground\">Wind: 12.5 mph</p>\n            </div>\n          </div>\n          <div className=\"text-right\">\n            <p className=\"text-sm font-bold text-blue-500\" data-testid=\"text-wind-current\">\n              {energyData.windGeneration.toFixed(1)} kW\n            </p>\n            <p className=\"text-xs text-muted-foreground\">Avg: 6.8 kW</p>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":2458},"client/src/components/Sidebar.js":{"content":"import { Link, useLocation } from \"wouter\";\nimport { \n  LayoutDashboard, \n  AlertTriangle, \n  Home, \n  Settings2, \n  BarChart3, \n  Settings, \n  HelpCircle,\n  Zap\n} from \"lucide-react\";\n\nconst navigationItems = [\n  { path: \"/\", icon: LayoutDashboard, label: \"Dashboard\" },\n  { path: \"/alerts\", icon: AlertTriangle, label: \"Alerts & Notifications\", badge: 3 },\n  { path: \"/household\", icon: Home, label: \"Household Usage\" },\n  { path: \"/control\", icon: Settings2, label: \"Control Panel\" },\n  { path: \"/reports\", icon: BarChart3, label: \"Reports & Analytics\" },\n  { path: \"/settings\", icon: Settings, label: \"Settings & Language\" },\n  { path: \"/help\", icon: HelpCircle, label: \"Help & Training\" },\n];\n\nexport default function Sidebar({ isMobileNavOpen, toggleMobileNav }) {\n  const [location] = useLocation();\n\n  const NavLink = ({ item }) => {\n    const { path, icon: Icon, label, badge } = item;\n    const isActive = location === path;\n\n    return (\n      <Link\n        href={path}\n        data-testid={`nav-link-${path.slice(1) || 'dashboard'}`}\n        className={`flex items-center px-4 py-3 text-sm font-medium rounded-lg transition-colors ${\n          isActive\n            ? \"bg-primary text-primary-foreground\"\n            : \"text-muted-foreground hover:bg-accent hover:text-accent-foreground\"\n        }`}\n      >\n        <Icon className=\"w-5 h-5 mr-3\" />\n        {label}\n        {badge && (\n          <span className=\"ml-auto bg-destructive text-destructive-foreground text-xs px-2 py-1 rounded-full\">\n            {badge}\n          </span>\n        )}\n      </Link>\n    );\n  };\n\n  return (\n    <>\n      {/* Desktop Sidebar */}\n      <aside className=\"bg-card border-r border-border w-64 flex-shrink-0 hidden lg:flex flex-col\">\n        <div className=\"p-6 border-b border-border\">\n          <h1 className=\"text-xl font-bold text-primary flex items-center\">\n            <Zap className=\"w-8 h-8 mr-3 text-primary\" />\n            EnergyFlow\n          </h1>\n        </div>\n        \n        <nav className=\"flex-1 p-4 space-y-2\">\n          {navigationItems.map((item) => (\n            <NavLink key={item.path} item={item} />\n          ))}\n        </nav>\n      </aside>\n\n      {/* Mobile Navigation Overlay */}\n      {isMobileNavOpen && (\n        <div className=\"fixed inset-0 z-50 lg:hidden\">\n          <div className=\"fixed inset-0 bg-black/50\" onClick={toggleMobileNav}></div>\n          <div className=\"fixed left-0 top-0 bottom-0 w-64 bg-card border-r border-border\">\n            <div className=\"p-6 border-b border-border flex justify-between items-center\">\n              <h1 className=\"text-xl font-bold text-primary flex items-center\">\n                <Zap className=\"w-8 h-8 mr-3 text-primary\" />\n                EnergyFlow\n              </h1>\n              <button \n                onClick={toggleMobileNav} \n                className=\"p-2 hover:bg-accent rounded-lg\"\n                data-testid=\"button-close-mobile-nav\"\n              >\n                <svg className=\"w-6 h-6\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M6 18L18 6M6 6l12 12\"></path>\n                </svg>\n              </button>\n            </div>\n            <nav className=\"p-4 space-y-2\" onClick={toggleMobileNav}>\n              {navigationItems.map((item) => (\n                <NavLink key={item.path} item={item} />\n              ))}\n            </nav>\n          </div>\n        </div>\n      )}\n    </>\n  );\n}\n","size_bytes":3491},"client/src/components/SummaryCards.js":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Sun, Zap, Battery, TrendingUp } from \"lucide-react\";\n\nexport default function SummaryCards() {\n  const { data: energyData } = useQuery({\n    queryKey: [\"/api/energy/current\"],\n    refetchInterval: 5000,\n  });\n\n  if (!energyData) {\n    return (\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n        {[1, 2, 3, 4].map((i) => (\n          <div key={i} className=\"bg-card border border-border rounded-lg p-6 animate-pulse\">\n            <div className=\"h-4 bg-muted rounded w-3/4 mb-2\"></div>\n            <div className=\"h-8 bg-muted rounded w-1/2 mb-2\"></div>\n            <div className=\"h-4 bg-muted rounded w-2/3\"></div>\n          </div>\n        ))}\n      </div>\n    );\n  }\n\n  const cards = [\n    {\n      title: \"Energy Generated Today\",\n      value: `${energyData.totalGeneration.toFixed(1)} kWh`,\n      change: \"+12% from yesterday\",\n      changeType: \"positive\",\n      icon: Sun,\n      bgColor: \"bg-yellow-500/20\",\n      iconColor: \"text-yellow-500\",\n      testId: \"card-energy-generated\"\n    },\n    {\n      title: \"Energy Consumed Today\", \n      value: `${energyData.totalConsumption.toFixed(1)} kWh`,\n      change: \"+8% from yesterday\",\n      changeType: \"negative\",\n      icon: Zap,\n      bgColor: \"bg-red-500/20\",\n      iconColor: \"text-red-500\",\n      testId: \"card-energy-consumed\"\n    },\n    {\n      title: \"Battery Level\",\n      value: `${energyData.batteryLevel.toFixed(0)}%`,\n      change: \"Excellent Health\",\n      changeType: \"positive\",\n      icon: Battery,\n      bgColor: \"bg-green-500/20\", \n      iconColor: \"text-green-500\",\n      testId: \"card-battery-level\"\n    },\n    {\n      title: \"Efficiency\",\n      value: `${energyData.efficiency.toFixed(1)}%`,\n      change: \"Above target\",\n      changeType: \"positive\",\n      icon: TrendingUp,\n      bgColor: \"bg-blue-500/20\",\n      iconColor: \"text-blue-500\",\n      testId: \"card-efficiency\"\n    }\n  ];\n\n  return (\n    <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n      {cards.map((card) => {\n        const Icon = card.icon;\n        return (\n          <div key={card.title} className=\"bg-card border border-border rounded-lg p-6\" data-testid={card.testId}>\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm text-muted-foreground\">{card.title}</p>\n                <p \n                  className={`text-2xl font-bold ${\n                    card.changeType === 'positive' ? 'text-primary' : 'text-destructive'\n                  }`}\n                  data-testid={`text-${card.testId}-value`}\n                >\n                  {card.value}\n                </p>\n              </div>\n              <div className={`w-12 h-12 ${card.bgColor} rounded-lg flex items-center justify-center`}>\n                <Icon className={`w-6 h-6 ${card.iconColor}`} />\n              </div>\n            </div>\n            <p \n              className={`text-sm mt-2 ${\n                card.changeType === 'positive' ? 'text-green-400' : 'text-red-400'\n              }`}\n              data-testid={`text-${card.testId}-change`}\n            >\n              {card.change}\n            </p>\n          </div>\n        );\n      })}\n    </div>\n  );\n}\n","size_bytes":3269},"client/src/hooks/use-mobile.js":{"content":"import { useState, useEffect } from \"react\";\n\nconst MOBILE_BREAKPOINT = 768;\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = useState(undefined);\n\n  useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`);\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT);\n    };\n    mql.addEventListener(\"change\", onChange);\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT);\n    return () => mql.removeEventListener(\"change\", onChange);\n  }, []);\n\n  return !!isMobile;\n}\n","size_bytes":556},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.js":{"content":"import { useState, useEffect } from \"react\";\n\nconst TOAST_LIMIT = 1;\nconst TOAST_REMOVE_DELAY = 1000000;\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\", \n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n};\n\nlet count = 0;\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER;\n  return count.toString();\n}\n\nconst toastTimeouts = new Map();\n\nconst addToRemoveQueue = (toastId) => {\n  if (toastTimeouts.has(toastId)) {\n    return;\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId);\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    });\n  }, TOAST_REMOVE_DELAY);\n\n  toastTimeouts.set(toastId, timeout);\n};\n\nexport const reducer = (state, action) => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      };\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      };\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action;\n\n      if (toastId) {\n        addToRemoveQueue(toastId);\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id);\n        });\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      };\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        };\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      };\n  }\n};\n\nconst listeners = [];\n\nlet memoryState = { toasts: [] };\n\nfunction dispatch(action) {\n  memoryState = reducer(memoryState, action);\n  listeners.forEach((listener) => {\n    listener(memoryState);\n  });\n}\n\nfunction toast({ ...props }) {\n  const id = genId();\n\n  const update = (props) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    });\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id });\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss();\n      },\n    },\n  });\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  };\n}\n\nfunction useToast() {\n  const [state, setState] = useState(memoryState);\n\n  useEffect(() => {\n    listeners.push(setState);\n    return () => {\n      const index = listeners.indexOf(setState);\n      if (index > -1) {\n        listeners.splice(index, 1);\n      }\n    };\n  }, [state]);\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  };\n}\n\nexport { useToast, toast };\n","size_bytes":2959},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/queryClient.js":{"content":"import { QueryClient } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(method, url, data) {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\nexport const getQueryFn = ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\"), {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1158},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.js":{"content":"import { clsx } from \"clsx\";\nimport { twMerge } from \"tailwind-merge\";\n\nexport function cn(...inputs) {\n  return twMerge(clsx(inputs));\n}\n","size_bytes":138},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/Alerts.js":{"content":"import { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { apiRequest, queryClient } from \"../lib/queryClient\";\nimport { AlertTriangle, Info, CheckCircle, AlertCircle } from \"lucide-react\";\n\nexport default function Alerts() {\n  const { data: alerts, isLoading } = useQuery({\n    queryKey: [\"/api/alerts\"],\n    refetchInterval: 10000,\n  });\n\n  const markAsReadMutation = useMutation({\n    mutationFn: (alertId) => apiRequest(\"PATCH\", `/api/alerts/${alertId}/read`),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/alerts\"] });\n    },\n  });\n\n  const getAlertIcon = (type) => {\n    switch (type) {\n      case 'warning':\n        return AlertTriangle;\n      case 'info':\n        return Info;\n      case 'success':\n        return CheckCircle;\n      case 'error':\n        return AlertCircle;\n      default:\n        return Info;\n    }\n  };\n\n  const getAlertStyles = (type) => {\n    switch (type) {\n      case 'warning':\n        return 'border-yellow-500 bg-yellow-500/10';\n      case 'info':\n        return 'border-blue-500 bg-blue-500/10';\n      case 'success':\n        return 'border-green-500 bg-green-500/10';\n      case 'error':\n        return 'border-red-500 bg-red-500/10';\n      default:\n        return 'border-blue-500 bg-blue-500/10';\n    }\n  };\n\n  const getTimeAgo = (timestamp) => {\n    const now = new Date();\n    const alertTime = new Date(timestamp);\n    const diffInMinutes = Math.floor((now - alertTime) / (1000 * 60));\n    \n    if (diffInMinutes < 1) return 'Just now';\n    if (diffInMinutes < 60) return `${diffInMinutes} minutes ago`;\n    \n    const diffInHours = Math.floor(diffInMinutes / 60);\n    if (diffInHours < 24) return `${diffInHours} hour${diffInHours > 1 ? 's' : ''} ago`;\n    \n    const diffInDays = Math.floor(diffInHours / 24);\n    return `${diffInDays} day${diffInDays > 1 ? 's' : ''} ago`;\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"space-y-6\" data-testid=\"page-alerts\">\n        <h1 className=\"text-3xl font-bold\">Alerts & Notifications</h1>\n        <div className=\"space-y-4\">\n          {[1, 2, 3].map(i => (\n            <div key={i} className=\"bg-card border border-border rounded-lg p-6 animate-pulse\">\n              <div className=\"h-4 bg-muted rounded w-3/4 mb-2\"></div>\n              <div className=\"h-4 bg-muted rounded w-1/2\"></div>\n            </div>\n          ))}\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\" data-testid=\"page-alerts\">\n      <div className=\"flex items-center justify-between\">\n        <h1 className=\"text-3xl font-bold\">Alerts & Notifications</h1>\n        <div className=\"flex items-center space-x-2\">\n          <span className=\"text-sm text-muted-foreground\">\n            {alerts?.filter(alert => !alert.isRead).length || 0} unread\n          </span>\n        </div>\n      </div>\n\n      <div className=\"space-y-4\">\n        {alerts && alerts.length > 0 ? (\n          alerts.map((alert) => {\n            const Icon = getAlertIcon(alert.type);\n            const alertStyles = getAlertStyles(alert.type);\n            \n            return (\n              <div \n                key={alert.id}\n                className={`border rounded-lg p-6 ${alertStyles} ${\n                  alert.isRead ? 'opacity-60' : ''\n                }`}\n                data-testid={`alert-item-${alert.type}`}\n              >\n                <div className=\"flex items-start space-x-4\">\n                  <Icon className={`w-6 h-6 mt-1 ${\n                    alert.type === 'warning' ? 'text-yellow-500' :\n                    alert.type === 'info' ? 'text-blue-500' :\n                    alert.type === 'success' ? 'text-green-500' :\n                    alert.type === 'error' ? 'text-red-500' : 'text-blue-500'\n                  }`} />\n                  <div className=\"flex-1\">\n                    <div className=\"flex items-center justify-between\">\n                      <h3 className=\"text-lg font-semibold\" data-testid=\"text-alert-title\">\n                        {alert.title}\n                      </h3>\n                      <span className=\"text-sm text-muted-foreground\" data-testid=\"text-alert-time\">\n                        {getTimeAgo(alert.timestamp)}\n                      </span>\n                    </div>\n                    <p className=\"text-sm text-muted-foreground mt-2\" data-testid=\"text-alert-message\">\n                      {alert.message}\n                    </p>\n                    {!alert.isRead && (\n                      <button\n                        onClick={() => markAsReadMutation.mutate(alert.id)}\n                        disabled={markAsReadMutation.isPending}\n                        className=\"mt-3 px-4 py-2 bg-primary text-primary-foreground rounded-md text-sm hover:bg-primary/80 disabled:opacity-50\"\n                        data-testid=\"button-mark-read\"\n                      >\n                        {markAsReadMutation.isPending ? 'Marking...' : 'Mark as Read'}\n                      </button>\n                    )}\n                  </div>\n                </div>\n              </div>\n            );\n          })\n        ) : (\n          <div className=\"bg-card border border-border rounded-lg p-12 text-center\">\n            <Info className=\"w-12 h-12 text-muted-foreground mx-auto mb-4\" />\n            <h3 className=\"text-lg font-medium mb-2\">No alerts</h3>\n            <p className=\"text-muted-foreground\">\n              All systems are running normally. New alerts will appear here.\n            </p>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n","size_bytes":5534},"client/src/pages/Control.js":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { apiRequest, queryClient } from \"../lib/queryClient\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Slider } from \"@/components/ui/slider\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Settings, Power, Battery, Zap, Sun, Wind } from \"lucide-react\";\n\nexport default function Control() {\n  const [batteryMode, setBatteryMode] = useState(\"auto\");\n  const [maxChargeLevel, setMaxChargeLevel] = useState([90]);\n  const [minDischargeLevel, setMinDischargeLevel] = useState([20]);\n  const [gridConnection, setGridConnection] = useState(true);\n  const [autoOptimization, setAutoOptimization] = useState(true);\n\n  const { data: energyData } = useQuery({\n    queryKey: [\"/api/energy/current\"],\n    refetchInterval: 5000,\n  });\n\n  const emergencyShutdownMutation = useMutation({\n    mutationFn: () => apiRequest(\"POST\", \"/api/system/emergency-shutdown\"),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/energy/current\"] });\n    },\n  });\n\n  const systemRestartMutation = useMutation({\n    mutationFn: () => apiRequest(\"POST\", \"/api/system/restart\"),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/energy/current\"] });\n    },\n  });\n\n  return (\n    <div className=\"space-y-6\" data-testid=\"page-control\">\n      <div className=\"flex items-center justify-between\">\n        <h1 className=\"text-3xl font-bold\">Control Panel</h1>\n        <div className=\"flex items-center space-x-2\">\n          <span className=\"text-sm text-muted-foreground\">System Status:</span>\n          <span className=\"text-sm text-green-400 font-medium\">\n            {energyData?.gridStatus ? 'Online' : 'Offline'}\n          </span>\n        </div>\n      </div>\n\n      {/* System Controls */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n        {/* Battery Management */}\n        <Card data-testid=\"card-battery-management\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center\">\n              <Battery className=\"w-5 h-5 mr-2\" />\n              Battery Management\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-6\">\n            <div>\n              <label className=\"text-sm font-medium mb-2 block\">Battery Mode</label>\n              <div className=\"grid grid-cols-3 gap-2\">\n                {['auto', 'charge', 'discharge'].map((mode) => (\n                  <Button\n                    key={mode}\n                    variant={batteryMode === mode ? 'default' : 'outline'}\n                    size=\"sm\"\n                    onClick={() => setBatteryMode(mode)}\n                    data-testid={`button-battery-mode-${mode}`}\n                    className=\"capitalize\"\n                  >\n                    {mode}\n                  </Button>\n                ))}\n              </div>\n            </div>\n\n            <div>\n              <label className=\"text-sm font-medium mb-2 block\">\n                Max Charge Level: {maxChargeLevel[0]}%\n              </label>\n              <Slider\n                value={maxChargeLevel}\n                onValueChange={setMaxChargeLevel}\n                max={100}\n                min={50}\n                step={5}\n                className=\"w-full\"\n                data-testid=\"slider-max-charge\"\n              />\n            </div>\n\n            <div>\n              <label className=\"text-sm font-medium mb-2 block\">\n                Min Discharge Level: {minDischargeLevel[0]}%\n              </label>\n              <Slider\n                value={minDischargeLevel}\n                onValueChange={setMinDischargeLevel}\n                max={50}\n                min={10}\n                step={5}\n                className=\"w-full\"\n                data-testid=\"slider-min-discharge\"\n              />\n            </div>\n\n            <div className=\"pt-4 border-t\">\n              <p className=\"text-sm text-muted-foreground mb-2\">Current Status</p>\n              <div className=\"grid grid-cols-2 gap-4 text-sm\">\n                <div>\n                  <span className=\"text-muted-foreground\">Level:</span>\n                  <span className=\"ml-2 font-medium\" data-testid=\"text-current-battery-level\">\n                    {energyData?.batteryLevel.toFixed(0) || '84'}%\n                  </span>\n                </div>\n                <div>\n                  <span className=\"text-muted-foreground\">Health:</span>\n                  <span className=\"ml-2 font-medium text-green-400\" data-testid=\"text-current-battery-health\">\n                    {energyData?.batteryHealth.toFixed(0) || '96'}%\n                  </span>\n                </div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Grid Management */}\n        <Card data-testid=\"card-grid-management\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center\">\n              <Zap className=\"w-5 h-5 mr-2\" />\n              Grid Management\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <label className=\"text-sm font-medium\">Grid Connection</label>\n                <p className=\"text-xs text-muted-foreground\">\n                  Enable/disable grid connection\n                </p>\n              </div>\n              <Switch\n                checked={gridConnection}\n                onCheckedChange={setGridConnection}\n                data-testid=\"switch-grid-connection\"\n              />\n            </div>\n\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <label className=\"text-sm font-medium\">Auto Optimization</label>\n                <p className=\"text-xs text-muted-foreground\">\n                  Automatically optimize energy flow\n                </p>\n              </div>\n              <Switch\n                checked={autoOptimization}\n                onCheckedChange={setAutoOptimization}\n                data-testid=\"switch-auto-optimization\"\n              />\n            </div>\n\n            <div className=\"pt-4 border-t\">\n              <p className=\"text-sm text-muted-foreground mb-2\">Grid Status</p>\n              <div className=\"grid grid-cols-2 gap-4 text-sm\">\n                <div>\n                  <span className=\"text-muted-foreground\">Status:</span>\n                  <span className={`ml-2 font-medium ${\n                    energyData?.gridStatus ? 'text-green-400' : 'text-red-400'\n                  }`} data-testid=\"text-grid-status\">\n                    {energyData?.gridStatus ? 'Online' : 'Offline'}\n                  </span>\n                </div>\n                <div>\n                  <span className=\"text-muted-foreground\">Load:</span>\n                  <span className=\"ml-2 font-medium\" data-testid=\"text-grid-load\">\n                    {energyData?.gridLoad.toFixed(0) || '67'}%\n                  </span>\n                </div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Generation Sources */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n        {/* Solar Controls */}\n        <Card data-testid=\"card-solar-controls\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center\">\n              <Sun className=\"w-5 h-5 mr-2\" />\n              Solar Panel Controls\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div className=\"flex items-center justify-between\">\n              <span className=\"text-sm\">Panel 1</span>\n              <Switch defaultChecked data-testid=\"switch-solar-panel-1\" />\n            </div>\n            <div className=\"flex items-center justify-between\">\n              <span className=\"text-sm\">Panel 2</span>\n              <Switch defaultChecked data-testid=\"switch-solar-panel-2\" />\n            </div>\n            <div className=\"flex items-center justify-between\">\n              <span className=\"text-sm\">Panel 3</span>\n              <Switch defaultChecked data-testid=\"switch-solar-panel-3\" />\n            </div>\n            <div className=\"flex items-center justify-between\">\n              <span className=\"text-sm\">Panel 4</span>\n              <Switch defaultChecked data-testid=\"switch-solar-panel-4\" />\n            </div>\n            \n            <div className=\"pt-4 border-t\">\n              <div className=\"flex justify-between items-center\">\n                <span className=\"text-sm text-muted-foreground\">Current Output</span>\n                <span className=\"text-lg font-bold text-yellow-500\" data-testid=\"text-solar-output\">\n                  {energyData?.solarGeneration.toFixed(1) || '12.3'} kW\n                </span>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Wind Controls */}\n        <Card data-testid=\"card-wind-controls\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center\">\n              <Wind className=\"w-5 h-5 mr-2\" />\n              Wind Turbine Controls\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div className=\"flex items-center justify-between\">\n              <span className=\"text-sm\">Turbine Active</span>\n              <Switch defaultChecked data-testid=\"switch-wind-turbine\" />\n            </div>\n            <div className=\"flex items-center justify-between\">\n              <span className=\"text-sm\">Auto Orientation</span>\n              <Switch defaultChecked data-testid=\"switch-wind-orientation\" />\n            </div>\n            <div className=\"flex items-center justify-between\">\n              <span className=\"text-sm\">Brake System</span>\n              <Switch data-testid=\"switch-wind-brake\" />\n            </div>\n            \n            <div className=\"pt-4 border-t space-y-2\">\n              <div className=\"flex justify-between items-center\">\n                <span className=\"text-sm text-muted-foreground\">Current Output</span>\n                <span className=\"text-lg font-bold text-blue-500\" data-testid=\"text-wind-output\">\n                  {energyData?.windGeneration.toFixed(1) || '8.7'} kW\n                </span>\n              </div>\n              <div className=\"flex justify-between items-center\">\n                <span className=\"text-sm text-muted-foreground\">Wind Speed</span>\n                <span className=\"text-sm\" data-testid=\"text-wind-speed\">12.5 mph</span>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Emergency Controls */}\n      <Card data-testid=\"card-emergency-controls\">\n        <CardHeader>\n          <CardTitle className=\"flex items-center text-red-400\">\n            <Power className=\"w-5 h-5 mr-2\" />\n            Emergency Controls\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            <Button\n              variant=\"destructive\"\n              onClick={() => emergencyShutdownMutation.mutate()}\n              disabled={emergencyShutdownMutation.isPending}\n              data-testid=\"button-emergency-shutdown\"\n              className=\"h-12\"\n            >\n              <Power className=\"w-4 h-4 mr-2\" />\n              {emergencyShutdownMutation.isPending ? 'Shutting Down...' : 'Emergency Shutdown'}\n            </Button>\n            \n            <Button\n              variant=\"outline\"\n              onClick={() => systemRestartMutation.mutate()}\n              disabled={systemRestartMutation.isPending}\n              data-testid=\"button-system-restart\"\n              className=\"h-12\"\n            >\n              <Settings className=\"w-4 h-4 mr-2\" />\n              {systemRestartMutation.isPending ? 'Restarting...' : 'System Restart'}\n            </Button>\n          </div>\n          \n          <p className=\"text-sm text-muted-foreground mt-4\">\n            Use emergency controls only when necessary. Emergency shutdown will immediately disconnect all power sources.\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":12271},"client/src/pages/Dashboard.js":{"content":"import SummaryCards from \"../components/SummaryCards\";\nimport EnergyFlow from \"../components/EnergyFlow\";\nimport GenerationChart from \"../components/GenerationChart\";\nimport BatteryStatus from \"../components/BatteryStatus\";\nimport GridStatus from \"../components/GridStatus\";\nimport RenewableStatus from \"../components/RenewableStatus\";\nimport RecentAlerts from \"../components/RecentAlerts\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { apiRequest } from \"../lib/queryClient\";\n\nexport default function Dashboard() {\n  const { data: energyData } = useQuery({\n    queryKey: [\"/api/energy/current\"],\n    refetchInterval: 5000,\n  });\n\n  // Simulate data updates every 30 seconds\n  const simulateDataUpdate = async () => {\n    try {\n      await apiRequest(\"POST\", \"/api/energy/simulate\");\n    } catch (error) {\n      console.error(\"Failed to simulate data:\", error);\n    }\n  };\n\n  // Set up data simulation interval\n  setTimeout(() => {\n    setInterval(simulateDataUpdate, 30000);\n  }, 5000);\n\n  return (\n    <div className=\"space-y-6\" data-testid=\"page-dashboard\">\n      {/* Summary Cards */}\n      <SummaryCards />\n      \n      {/* Energy Flow Visualization */}\n      <EnergyFlow />\n      \n      {/* Charts Section */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n        <GenerationChart />\n        <BatteryStatus />\n      </div>\n      \n      {/* System Status Grid */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n        <GridStatus />\n        <RenewableStatus />\n        <RecentAlerts />\n      </div>\n      \n      {/* Performance Metrics */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n        <div className=\"bg-card border border-border rounded-lg p-6\" data-testid=\"card-peak-generation\">\n          <div className=\"flex items-center justify-between mb-4\">\n            <h4 className=\"text-sm font-medium text-muted-foreground\">Peak Generation</h4>\n            <svg className=\"w-5 h-5 text-yellow-500\" fill=\"currentColor\" viewBox=\"0 0 24 24\">\n              <path d=\"M12 2.25a.75.75 0 01.633.33l7.5 11.25a.75.75 0 01-.633 1.17H4.5a.75.75 0 01-.633-1.17L11.367 2.58A.75.75 0 0112 2.25z\"/>\n            </svg>\n          </div>\n          <p className=\"text-2xl font-bold\" data-testid=\"text-peak-generation\">\n            {energyData ? (energyData.totalGeneration * 1.2).toFixed(1) : '23.7'} kW\n          </p>\n          <p className=\"text-sm text-muted-foreground\">at 12:45 PM</p>\n        </div>\n        \n        <div className=\"bg-card border border-border rounded-lg p-6\" data-testid=\"card-carbon-saved\">\n          <div className=\"flex items-center justify-between mb-4\">\n            <h4 className=\"text-sm font-medium text-muted-foreground\">Carbon Saved</h4>\n            <svg className=\"w-5 h-5 text-green-500\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M5 3v4M3 5h4M6 17v4m-2-2h4m5-16l2.286 6.857L21 12l-5.714 2.143L13 21l-2.286-6.857L5 12l5.714-2.143L13 3z\"></path>\n            </svg>\n          </div>\n          <p className=\"text-2xl font-bold text-green-400\" data-testid=\"text-carbon-saved\">\n            {energyData ? (energyData.totalGeneration * 1.35).toFixed(1) : '28.4'} kg\n          </p>\n          <p className=\"text-sm text-muted-foreground\">CO₂ today</p>\n        </div>\n        \n        <div className=\"bg-card border border-border rounded-lg p-6\" data-testid=\"card-cost-savings\">\n          <div className=\"flex items-center justify-between mb-4\">\n            <h4 className=\"text-sm font-medium text-muted-foreground\">Cost Savings</h4>\n            <svg className=\"w-5 h-5 text-primary\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M12 8c-1.657 0-3 .895-3 2s1.343 2 3 2 3 .895 3 2-1.343 2-3 2m0-8c1.11 0 2.08.402 2.599 1M12 8V7m0 1v8m0 0v1m0-1c-1.11 0-2.08-.402-2.599-1\"></path>\n            </svg>\n          </div>\n          <p className=\"text-2xl font-bold text-primary\" data-testid=\"text-cost-savings\">\n            ${energyData ? (energyData.totalGeneration * 0.68).toFixed(2) : '14.20'}\n          </p>\n          <p className=\"text-sm text-muted-foreground\">saved today</p>\n        </div>\n        \n        <div className=\"bg-card border border-border rounded-lg p-6\" data-testid=\"card-system-uptime\">\n          <div className=\"flex items-center justify-between mb-4\">\n            <h4 className=\"text-sm font-medium text-muted-foreground\">System Uptime</h4>\n            <svg className=\"w-5 h-5 text-green-500\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z\"></path>\n            </svg>\n          </div>\n          <p className=\"text-2xl font-bold text-green-400\" data-testid=\"text-system-uptime\">99.8%</p>\n          <p className=\"text-sm text-muted-foreground\">last 30 days</p>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":5038},"client/src/pages/Help.js":{"content":"import { useState } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Accordion, AccordionContent, AccordionItem, AccordionTrigger } from \"@/components/ui/accordion\";\nimport { Input } from \"@/components/ui/input\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { HelpCircle, Search, Book, Video, MessageCircle, ExternalLink, Download } from \"lucide-react\";\n\nexport default function Help() {\n  const [searchQuery, setSearchQuery] = useState(\"\");\n\n  const faqItems = [\n    {\n      id: \"1\",\n      question: \"How do I interpret the energy flow visualization?\",\n      answer: \"The energy flow visualization shows real-time energy movement from generation sources (solar panels and wind turbines) through the battery storage system to your household consumption. The animated lines indicate active energy transfer, and the thickness represents the amount of power flowing.\",\n      category: \"Dashboard\"\n    },\n    {\n      id: \"2\", \n      question: \"What does battery health percentage mean?\",\n      answer: \"Battery health indicates the overall condition of your battery system. 90%+ is excellent, 70-89% is good, and below 70% may require maintenance. This is calculated based on charge cycles, temperature history, and capacity retention over time.\",\n      category: \"Battery\"\n    },\n    {\n      id: \"3\",\n      question: \"How is system efficiency calculated?\",\n      answer: \"System efficiency is calculated as (Total Energy Generation / Total Energy Consumption) × 100. Values above 100% indicate energy surplus, while below 100% means you're consuming more than generating.\",\n      category: \"Analytics\"\n    },\n    {\n      id: \"4\",\n      question: \"What triggers system alerts?\",\n      answer: \"Alerts are triggered by various conditions: battery levels outside normal range, high temperature readings, grid connectivity issues, or when energy generation drops significantly. You can customize alert thresholds in Settings.\",\n      category: \"Alerts\"\n    },\n    {\n      id: \"5\",\n      question: \"How do I optimize my energy usage?\",\n      answer: \"Use the Control Panel to set battery charge/discharge schedules, enable auto-optimization, and monitor the Household Usage page to identify high-consumption appliances. Consider shifting usage to peak generation hours.\",\n      category: \"Optimization\"\n    },\n    {\n      id: \"6\",\n      question: \"What should I do if the grid goes offline?\",\n      answer: \"When the grid goes offline, your system automatically switches to battery backup mode. Monitor your battery level closely and reduce non-essential consumption to extend backup time. The system will reconnect automatically when grid power is restored.\",\n      category: \"Troubleshooting\"\n    }\n  ];\n\n  const trainingVideos = [\n    {\n      title: \"Dashboard Overview\",\n      duration: \"5:23\",\n      description: \"Complete walkthrough of the energy dashboard interface\",\n      category: \"Getting Started\"\n    },\n    {\n      title: \"Battery Management Best Practices\", \n      duration: \"8:15\",\n      description: \"Learn how to maximize battery life and performance\",\n      category: \"Battery\"\n    },\n    {\n      title: \"Setting Up Alerts and Notifications\",\n      duration: \"4:42\", \n      description: \"Configure custom alerts for your energy system\",\n      category: \"Configuration\"\n    },\n    {\n      title: \"Understanding Energy Flow\",\n      duration: \"6:18\",\n      description: \"Deep dive into energy generation and consumption patterns\",\n      category: \"Analytics\"\n    }\n  ];\n\n  const quickGuides = [\n    {\n      title: \"Quick Start Guide\",\n      description: \"Get up and running with your energy system in 10 minutes\",\n      icon: Book,\n      downloadUrl: \"/guides/quick-start.pdf\"\n    },\n    {\n      title: \"Installation Manual\",\n      description: \"Complete hardware installation and setup instructions\", \n      icon: Book,\n      downloadUrl: \"/guides/installation.pdf\"\n    },\n    {\n      title: \"Troubleshooting Guide\",\n      description: \"Common issues and solutions for energy system problems\",\n      icon: Book, \n      downloadUrl: \"/guides/troubleshooting.pdf\"\n    },\n    {\n      title: \"API Documentation\",\n      description: \"Technical documentation for developers and integrators\",\n      icon: Book,\n      downloadUrl: \"/guides/api-docs.pdf\"\n    }\n  ];\n\n  const filteredFAQ = faqItems.filter(item =>\n    item.question.toLowerCase().includes(searchQuery.toLowerCase()) ||\n    item.answer.toLowerCase().includes(searchQuery.toLowerCase()) ||\n    item.category.toLowerCase().includes(searchQuery.toLowerCase())\n  );\n\n  return (\n    <div className=\"space-y-6\" data-testid=\"page-help\">\n      <div className=\"flex items-center justify-between\">\n        <h1 className=\"text-3xl font-bold\">Help & Training</h1>\n        <Button variant=\"outline\" data-testid=\"button-contact-support\">\n          <MessageCircle className=\"w-4 h-4 mr-2\" />\n          Contact Support\n        </Button>\n      </div>\n\n      {/* Search */}\n      <Card data-testid=\"card-help-search\">\n        <CardContent className=\"pt-6\">\n          <div className=\"relative\">\n            <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground w-4 h-4\" />\n            <Input\n              placeholder=\"Search help articles, FAQs, and guides...\"\n              value={searchQuery}\n              onChange={(e) => setSearchQuery(e.target.value)}\n              className=\"pl-10\"\n              data-testid=\"input-help-search\"\n            />\n          </div>\n        </CardContent>\n      </Card>\n\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n        {/* FAQ Section */}\n        <Card data-testid=\"card-faq\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center\">\n              <HelpCircle className=\"w-5 h-5 mr-2\" />\n              Frequently Asked Questions\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <Accordion type=\"single\" collapsible className=\"w-full\">\n              {filteredFAQ.map((item) => (\n                <AccordionItem key={item.id} value={item.id}>\n                  <AccordionTrigger className=\"text-left\" data-testid={`faq-question-${item.id}`}>\n                    <div className=\"flex items-center justify-between w-full mr-4\">\n                      <span>{item.question}</span>\n                      <Badge variant=\"secondary\" className=\"text-xs\">\n                        {item.category}\n                      </Badge>\n                    </div>\n                  </AccordionTrigger>\n                  <AccordionContent className=\"text-muted-foreground\" data-testid={`faq-answer-${item.id}`}>\n                    {item.answer}\n                  </AccordionContent>\n                </AccordionItem>\n              ))}\n            </Accordion>\n            \n            {filteredFAQ.length === 0 && searchQuery && (\n              <div className=\"text-center py-8\">\n                <p className=\"text-muted-foreground\">No results found for \"{searchQuery}\"</p>\n              </div>\n            )}\n          </CardContent>\n        </Card>\n\n        {/* Training Videos */}\n        <Card data-testid=\"card-training-videos\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center\">\n              <Video className=\"w-5 h-5 mr-2\" />\n              Training Videos\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              {trainingVideos.map((video, index) => (\n                <div key={index} className=\"flex items-center justify-between p-3 border border-border rounded-lg hover:bg-accent/50 transition-colors\">\n                  <div className=\"flex items-center space-x-3\">\n                    <div className=\"w-10 h-10 bg-primary/20 rounded-lg flex items-center justify-center\">\n                      <Video className=\"w-5 h-5 text-primary\" />\n                    </div>\n                    <div>\n                      <p className=\"text-sm font-medium\" data-testid={`text-video-title-${index}`}>\n                        {video.title}\n                      </p>\n                      <p className=\"text-xs text-muted-foreground\">\n                        {video.description}\n                      </p>\n                      <div className=\"flex items-center space-x-2 mt-1\">\n                        <Badge variant=\"outline\" className=\"text-xs\">\n                          {video.category}\n                        </Badge>\n                        <span className=\"text-xs text-muted-foreground\">\n                          {video.duration}\n                        </span>\n                      </div>\n                    </div>\n                  </div>\n                  <Button variant=\"ghost\" size=\"sm\" data-testid={`button-play-video-${index}`}>\n                    <ExternalLink className=\"w-4 h-4\" />\n                  </Button>\n                </div>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Quick Guides */}\n      <Card data-testid=\"card-quick-guides\">\n        <CardHeader>\n          <CardTitle className=\"flex items-center\">\n            <Book className=\"w-5 h-5 mr-2\" />\n            Documentation & Guides\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n            {quickGuides.map((guide, index) => {\n              const Icon = guide.icon;\n              return (\n                <div key={index} className=\"p-4 border border-border rounded-lg hover:bg-accent/50 transition-colors\">\n                  <div className=\"flex items-center mb-3\">\n                    <div className=\"w-10 h-10 bg-primary/20 rounded-lg flex items-center justify-center mr-3\">\n                      <Icon className=\"w-5 h-5 text-primary\" />\n                    </div>\n                    <div className=\"flex-1\">\n                      <p className=\"text-sm font-medium\" data-testid={`text-guide-title-${index}`}>\n                        {guide.title}\n                      </p>\n                    </div>\n                  </div>\n                  <p className=\"text-xs text-muted-foreground mb-3\">\n                    {guide.description}\n                  </p>\n                  <Button variant=\"outline\" size=\"sm\" className=\"w-full\" data-testid={`button-download-guide-${index}`}>\n                    <Download className=\"w-4 h-4 mr-2\" />\n                    Download\n                  </Button>\n                </div>\n              );\n            })}\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Contact Information */}\n      <Card data-testid=\"card-contact-info\">\n        <CardHeader>\n          <CardTitle>Need More Help?</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n            <div className=\"text-center\">\n              <div className=\"w-12 h-12 bg-blue-500/20 rounded-lg flex items-center justify-center mx-auto mb-3\">\n                <MessageCircle className=\"w-6 h-6 text-blue-500\" />\n              </div>\n              <h4 className=\"text-sm font-medium mb-2\">Live Chat Support</h4>\n              <p className=\"text-xs text-muted-foreground mb-3\">\n                Get instant help from our technical support team\n              </p>\n              <Button variant=\"outline\" size=\"sm\" data-testid=\"button-live-chat\">\n                Start Chat\n              </Button>\n            </div>\n\n            <div className=\"text-center\">\n              <div className=\"w-12 h-12 bg-green-500/20 rounded-lg flex items-center justify-center mx-auto mb-3\">\n                <ExternalLink className=\"w-6 h-6 text-green-500\" />\n              </div>\n              <h4 className=\"text-sm font-medium mb-2\">Knowledge Base</h4>\n              <p className=\"text-xs text-muted-foreground mb-3\">\n                Browse our comprehensive online documentation\n              </p>\n              <Button variant=\"outline\" size=\"sm\" data-testid=\"button-knowledge-base\">\n                Visit KB\n              </Button>\n            </div>\n\n            <div className=\"text-center\">\n              <div className=\"w-12 h-12 bg-purple-500/20 rounded-lg flex items-center justify-center mx-auto mb-3\">\n                <MessageCircle className=\"w-6 h-6 text-purple-500\" />\n              </div>\n              <h4 className=\"text-sm font-medium mb-2\">Community Forum</h4>\n              <p className=\"text-xs text-muted-foreground mb-3\">\n                Connect with other users and share experiences\n              </p>\n              <Button variant=\"outline\" size=\"sm\" data-testid=\"button-community-forum\">\n                Join Forum\n              </Button>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":12849},"client/src/pages/Household.js":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { PieChart, Pie, Cell, ResponsiveContainer, BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, Legend } from \"recharts\";\nimport { Home, Zap, TrendingUp, TrendingDown } from \"lucide-react\";\n\nexport default function Household() {\n  const { data: energyData } = useQuery({\n    queryKey: [\"/api/energy/current\"],\n    refetchInterval: 5000,\n  });\n\n  const { data: historyData } = useQuery({\n    queryKey: [\"/api/energy/history\"],\n    select: (data) => data?.slice(-24) || [],\n  });\n\n  // Mock appliance consumption data\n  const applianceData = [\n    { name: 'HVAC', consumption: 2.8, percentage: 41, color: '#3B82F6' },\n    { name: 'Water Heater', consumption: 1.2, percentage: 18, color: '#EF4444' },\n    { name: 'Lighting', consumption: 0.8, percentage: 12, color: '#F59E0B' },\n    { name: 'Kitchen', consumption: 0.9, percentage: 13, color: '#10B981' },\n    { name: 'Electronics', consumption: 0.7, percentage: 10, color: '#8B5CF6' },\n    { name: 'Other', consumption: 0.4, percentage: 6, color: '#6B7280' },\n  ];\n\n  const hourlyUsage = historyData?.map((data, index) => ({\n    time: new Date(data.timestamp).getHours(),\n    consumption: data.householdConsumption,\n  })) || [];\n\n  const totalConsumption = energyData?.householdConsumption || 0;\n  const averageUsage = hourlyUsage.length > 0 \n    ? hourlyUsage.reduce((acc, curr) => acc + curr.consumption, 0) / hourlyUsage.length \n    : 0;\n\n  const trend = totalConsumption > averageUsage ? 'up' : 'down';\n  const trendPercentage = averageUsage > 0 \n    ? Math.abs(((totalConsumption - averageUsage) / averageUsage) * 100).toFixed(1)\n    : 0;\n\n  return (\n    <div className=\"space-y-6\" data-testid=\"page-household\">\n      <h1 className=\"text-3xl font-bold\">Household Usage</h1>\n\n      {/* Summary Cards */}\n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n        <div className=\"bg-card border border-border rounded-lg p-6\" data-testid=\"card-current-usage\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-sm text-muted-foreground\">Current Usage</p>\n              <p className=\"text-2xl font-bold text-primary\" data-testid=\"text-current-usage\">\n                {totalConsumption.toFixed(1)} kW\n              </p>\n            </div>\n            <div className=\"w-12 h-12 bg-blue-500/20 rounded-lg flex items-center justify-center\">\n              <Zap className=\"w-6 h-6 text-blue-500\" />\n            </div>\n          </div>\n          <div className=\"flex items-center mt-2\">\n            {trend === 'up' ? (\n              <TrendingUp className=\"w-4 h-4 text-red-400 mr-1\" />\n            ) : (\n              <TrendingDown className=\"w-4 h-4 text-green-400 mr-1\" />\n            )}\n            <p className={`text-sm ${trend === 'up' ? 'text-red-400' : 'text-green-400'}`}>\n              {trendPercentage}% from average\n            </p>\n          </div>\n        </div>\n\n        <div className=\"bg-card border border-border rounded-lg p-6\" data-testid=\"card-daily-total\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-sm text-muted-foreground\">Daily Total</p>\n              <p className=\"text-2xl font-bold text-green-400\" data-testid=\"text-daily-total\">\n                {(totalConsumption * 24).toFixed(1)} kWh\n              </p>\n            </div>\n            <div className=\"w-12 h-12 bg-green-500/20 rounded-lg flex items-center justify-center\">\n              <Home className=\"w-6 h-6 text-green-500\" />\n            </div>\n          </div>\n          <p className=\"text-sm text-muted-foreground mt-2\">Projected consumption</p>\n        </div>\n\n        <div className=\"bg-card border border-border rounded-lg p-6\" data-testid=\"card-efficiency-rating\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-sm text-muted-foreground\">Efficiency Rating</p>\n              <p className=\"text-2xl font-bold text-primary\" data-testid=\"text-efficiency-rating\">\n                {energyData ? (Math.min(100, (15 / totalConsumption) * 100).toFixed(0)) : '85'}%\n              </p>\n            </div>\n            <div className=\"w-12 h-12 bg-yellow-500/20 rounded-lg flex items-center justify-center\">\n              <TrendingUp className=\"w-6 h-6 text-yellow-500\" />\n            </div>\n          </div>\n          <p className=\"text-sm text-green-400 mt-2\">Good efficiency</p>\n        </div>\n      </div>\n\n      {/* Charts Section */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n        {/* Appliance Breakdown */}\n        <div className=\"bg-card border border-border rounded-lg p-6\" data-testid=\"chart-appliance-breakdown\">\n          <h3 className=\"text-lg font-semibold mb-4\">Appliance Consumption Breakdown</h3>\n          <div className=\"h-64\">\n            <ResponsiveContainer width=\"100%\" height=\"100%\">\n              <PieChart>\n                <Pie\n                  data={applianceData}\n                  cx=\"50%\"\n                  cy=\"50%\"\n                  outerRadius={80}\n                  dataKey=\"consumption\"\n                  label={({ name, percentage }) => `${name} ${percentage}%`}\n                >\n                  {applianceData.map((entry, index) => (\n                    <Cell key={`cell-${index}`} fill={entry.color} />\n                  ))}\n                </Pie>\n                <Tooltip \n                  formatter={(value) => [`${value} kW`, 'Consumption']}\n                  labelStyle={{ color: 'hsl(215 20% 65%)' }}\n                  contentStyle={{ \n                    backgroundColor: 'hsl(222 84% 8%)', \n                    border: '1px solid hsl(217 32% 17%)',\n                    borderRadius: '8px'\n                  }}\n                />\n              </PieChart>\n            </ResponsiveContainer>\n          </div>\n        </div>\n\n        {/* Hourly Usage Pattern */}\n        <div className=\"bg-card border border-border rounded-lg p-6\" data-testid=\"chart-hourly-usage\">\n          <h3 className=\"text-lg font-semibold mb-4\">Hourly Usage Pattern</h3>\n          <div className=\"h-64\">\n            <ResponsiveContainer width=\"100%\" height=\"100%\">\n              <BarChart data={hourlyUsage}>\n                <CartesianGrid strokeDasharray=\"3 3\" stroke=\"hsl(217 32% 17%)\" />\n                <XAxis \n                  dataKey=\"time\" \n                  stroke=\"hsl(215 20% 65%)\"\n                  fontSize={12}\n                  tick={{ fill: 'hsl(215 20% 65%)' }}\n                  tickFormatter={(hour) => `${hour}:00`}\n                />\n                <YAxis \n                  stroke=\"hsl(215 20% 65%)\"\n                  fontSize={12}\n                  tick={{ fill: 'hsl(215 20% 65%)' }}\n                  label={{ value: 'kW', angle: -90, position: 'insideLeft', style: { textAnchor: 'middle', fill: 'hsl(215 20% 65%)' } }}\n                />\n                <Tooltip \n                  formatter={(value) => [`${value.toFixed(1)} kW`, 'Consumption']}\n                  labelFormatter={(hour) => `Time: ${hour}:00`}\n                  labelStyle={{ color: 'hsl(215 20% 65%)' }}\n                  contentStyle={{ \n                    backgroundColor: 'hsl(222 84% 8%)', \n                    border: '1px solid hsl(217 32% 17%)',\n                    borderRadius: '8px'\n                  }}\n                />\n                <Bar dataKey=\"consumption\" fill=\"hsl(217 91% 60%)\" />\n              </BarChart>\n            </ResponsiveContainer>\n          </div>\n        </div>\n      </div>\n\n      {/* Appliance Details */}\n      <div className=\"bg-card border border-border rounded-lg p-6\">\n        <h3 className=\"text-lg font-semibold mb-4\">Appliance Details</h3>\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n          {applianceData.map((appliance) => (\n            <div \n              key={appliance.name} \n              className=\"p-4 border border-border rounded-lg\"\n              data-testid={`appliance-${appliance.name.toLowerCase().replace(' ', '-')}`}\n            >\n              <div className=\"flex items-center justify-between mb-2\">\n                <h4 className=\"font-medium\">{appliance.name}</h4>\n                <div \n                  className=\"w-4 h-4 rounded-full\" \n                  style={{ backgroundColor: appliance.color }}\n                ></div>\n              </div>\n              <p className=\"text-2xl font-bold\" data-testid={`text-${appliance.name.toLowerCase().replace(' ', '-')}-consumption`}>\n                {appliance.consumption} kW\n              </p>\n              <p className=\"text-sm text-muted-foreground\">\n                {appliance.percentage}% of total usage\n              </p>\n              <div className=\"w-full bg-muted rounded-full h-2 mt-2\">\n                <div \n                  className=\"h-2 rounded-full\" \n                  style={{ \n                    width: `${appliance.percentage}%`,\n                    backgroundColor: appliance.color \n                  }}\n                ></div>\n              </div>\n            </div>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":9126},"client/src/pages/Reports.js":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { AreaChart, Area, BarChart, Bar, LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from \"recharts\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Calendar, Download, TrendingUp, TrendingDown, DollarSign, Leaf } from \"lucide-react\";\n\nexport default function Reports() {\n  const [timeRange, setTimeRange] = useState(\"week\");\n\n  const { data: historyData } = useQuery({\n    queryKey: [\"/api/energy/history\", { hours: timeRange === \"day\" ? 24 : timeRange === \"week\" ? 168 : 720 }],\n    select: (data) => data || [],\n  });\n\n  const { data: currentData } = useQuery({\n    queryKey: [\"/api/energy/current\"],\n  });\n\n  // Process data for charts\n  const processedData = historyData?.map((data, index) => ({\n    time: timeRange === \"day\" \n      ? new Date(data.timestamp).toLocaleTimeString('en-US', { hour: '2-digit', minute: '2-digit' })\n      : timeRange === \"week\"\n      ? new Date(data.timestamp).toLocaleDateString('en-US', { weekday: 'short' })\n      : new Date(data.timestamp).toLocaleDateString('en-US', { month: 'short', day: 'numeric' }),\n    generation: data.totalGeneration,\n    consumption: data.totalConsumption,\n    solar: data.solarGeneration,\n    wind: data.windGeneration,\n    battery: data.batteryLevel,\n    efficiency: data.efficiency,\n    savings: data.totalGeneration * 0.68, // $0.68 per kWh saved\n  })) || [];\n\n  // Calculate summary metrics\n  const totalGeneration = processedData.reduce((sum, item) => sum + item.generation, 0);\n  const totalConsumption = processedData.reduce((sum, item) => sum + item.consumption, 0);\n  const totalSavings = processedData.reduce((sum, item) => sum + item.savings, 0);\n  const avgEfficiency = processedData.length > 0 \n    ? processedData.reduce((sum, item) => sum + item.efficiency, 0) / processedData.length \n    : 0;\n\n  const carbonSaved = totalGeneration * 1.35; // kg CO2 per kWh\n\n  const customTooltip = ({ active, payload, label }) => {\n    if (active && payload && payload.length) {\n      return (\n        <div className=\"bg-card border border-border rounded-lg p-3 shadow-lg\">\n          <p className=\"text-sm font-medium\">{`${timeRange === 'day' ? 'Time' : 'Period'}: ${label}`}</p>\n          {payload.map((entry, index) => (\n            <p key={index} className=\"text-sm\" style={{ color: entry.color }}>\n              {`${entry.name}: ${\n                entry.dataKey === 'savings' \n                  ? `$${entry.value.toFixed(2)}` \n                  : entry.dataKey === 'battery'\n                  ? `${entry.value.toFixed(0)}%`\n                  : `${entry.value.toFixed(1)} kW`\n              }`}\n            </p>\n          ))}\n        </div>\n      );\n    }\n    return null;\n  };\n\n  return (\n    <div className=\"space-y-6\" data-testid=\"page-reports\">\n      <div className=\"flex items-center justify-between\">\n        <h1 className=\"text-3xl font-bold\">Reports & Analytics</h1>\n        <div className=\"flex items-center space-x-2\">\n          <div className=\"flex space-x-1\">\n            {[\"day\", \"week\", \"month\"].map((range) => (\n              <Button\n                key={range}\n                variant={timeRange === range ? \"default\" : \"outline\"}\n                size=\"sm\"\n                onClick={() => setTimeRange(range)}\n                data-testid={`button-timerange-${range}`}\n                className=\"capitalize\"\n              >\n                {range}\n              </Button>\n            ))}\n          </div>\n          <Button variant=\"outline\" size=\"sm\" data-testid=\"button-export\">\n            <Download className=\"w-4 h-4 mr-2\" />\n            Export\n          </Button>\n        </div>\n      </div>\n\n      {/* Summary Cards */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n        <Card data-testid=\"card-total-generation\">\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Total Generation</CardTitle>\n            <TrendingUp className=\"h-4 w-4 text-green-400\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\" data-testid=\"text-total-generation\">\n              {totalGeneration.toFixed(1)} kWh\n            </div>\n            <p className=\"text-xs text-green-400\">\n              +15.2% from last {timeRange}\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card data-testid=\"card-total-consumption\">\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Total Consumption</CardTitle>\n            <TrendingDown className=\"h-4 w-4 text-blue-400\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\" data-testid=\"text-total-consumption\">\n              {totalConsumption.toFixed(1)} kWh\n            </div>\n            <p className=\"text-xs text-blue-400\">\n              -8.3% from last {timeRange}\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card data-testid=\"card-cost-savings\">\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Cost Savings</CardTitle>\n            <DollarSign className=\"h-4 w-4 text-primary\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-primary\" data-testid=\"text-cost-savings\">\n              ${totalSavings.toFixed(2)}\n            </div>\n            <p className=\"text-xs text-primary\">\n              ${(totalSavings / processedData.length).toFixed(2)} avg per {timeRange === 'day' ? 'hour' : 'day'}\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card data-testid=\"card-carbon-saved\">\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Carbon Saved</CardTitle>\n            <Leaf className=\"h-4 w-4 text-green-500\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-green-400\" data-testid=\"text-carbon-saved\">\n              {carbonSaved.toFixed(1)} kg\n            </div>\n            <p className=\"text-xs text-green-400\">\n              CO₂ emissions avoided\n            </p>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Charts Grid */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n        {/* Generation vs Consumption */}\n        <Card data-testid=\"chart-generation-vs-consumption\">\n          <CardHeader>\n            <CardTitle>Generation vs Consumption</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"h-64\">\n              <ResponsiveContainer width=\"100%\" height=\"100%\">\n                <AreaChart data={processedData}>\n                  <CartesianGrid strokeDasharray=\"3 3\" stroke=\"hsl(217 32% 17%)\" />\n                  <XAxis \n                    dataKey=\"time\" \n                    stroke=\"hsl(215 20% 65%)\"\n                    fontSize={12}\n                    tick={{ fill: 'hsl(215 20% 65%)' }}\n                  />\n                  <YAxis \n                    stroke=\"hsl(215 20% 65%)\"\n                    fontSize={12}\n                    tick={{ fill: 'hsl(215 20% 65%)' }}\n                  />\n                  <Tooltip content={customTooltip} />\n                  <Legend wrapperStyle={{ color: 'hsl(215 20% 65%)' }} />\n                  <Area \n                    type=\"monotone\" \n                    dataKey=\"generation\" \n                    stackId=\"1\" \n                    stroke=\"hsl(217 91% 60%)\" \n                    fill=\"hsl(217 91% 60%)\"\n                    fillOpacity={0.3}\n                    name=\"Generation\"\n                  />\n                  <Area \n                    type=\"monotone\" \n                    dataKey=\"consumption\" \n                    stackId=\"2\" \n                    stroke=\"hsl(0 84% 60%)\" \n                    fill=\"hsl(0 84% 60%)\"\n                    fillOpacity={0.3}\n                    name=\"Consumption\"\n                  />\n                </AreaChart>\n              </ResponsiveContainer>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Energy Sources Breakdown */}\n        <Card data-testid=\"chart-energy-sources\">\n          <CardHeader>\n            <CardTitle>Energy Sources Breakdown</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"h-64\">\n              <ResponsiveContainer width=\"100%\" height=\"100%\">\n                <AreaChart data={processedData}>\n                  <CartesianGrid strokeDasharray=\"3 3\" stroke=\"hsl(217 32% 17%)\" />\n                  <XAxis \n                    dataKey=\"time\" \n                    stroke=\"hsl(215 20% 65%)\"\n                    fontSize={12}\n                    tick={{ fill: 'hsl(215 20% 65%)' }}\n                  />\n                  <YAxis \n                    stroke=\"hsl(215 20% 65%)\"\n                    fontSize={12}\n                    tick={{ fill: 'hsl(215 20% 65%)' }}\n                  />\n                  <Tooltip content={customTooltip} />\n                  <Legend wrapperStyle={{ color: 'hsl(215 20% 65%)' }} />\n                  <Area \n                    type=\"monotone\" \n                    dataKey=\"solar\" \n                    stackId=\"1\" \n                    stroke=\"hsl(45 93% 58%)\" \n                    fill=\"hsl(45 93% 58%)\"\n                    fillOpacity={0.6}\n                    name=\"Solar\"\n                  />\n                  <Area \n                    type=\"monotone\" \n                    dataKey=\"wind\" \n                    stackId=\"1\" \n                    stroke=\"hsl(201 96% 32%)\" \n                    fill=\"hsl(201 96% 32%)\"\n                    fillOpacity={0.6}\n                    name=\"Wind\"\n                  />\n                </AreaChart>\n              </ResponsiveContainer>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Battery Performance */}\n        <Card data-testid=\"chart-battery-performance\">\n          <CardHeader>\n            <CardTitle>Battery Performance</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"h-64\">\n              <ResponsiveContainer width=\"100%\" height=\"100%\">\n                <LineChart data={processedData}>\n                  <CartesianGrid strokeDasharray=\"3 3\" stroke=\"hsl(217 32% 17%)\" />\n                  <XAxis \n                    dataKey=\"time\" \n                    stroke=\"hsl(215 20% 65%)\"\n                    fontSize={12}\n                    tick={{ fill: 'hsl(215 20% 65%)' }}\n                  />\n                  <YAxis \n                    stroke=\"hsl(215 20% 65%)\"\n                    fontSize={12}\n                    tick={{ fill: 'hsl(215 20% 65%)' }}\n                    domain={[0, 100]}\n                  />\n                  <Tooltip content={customTooltip} />\n                  <Legend wrapperStyle={{ color: 'hsl(215 20% 65%)' }} />\n                  <Line \n                    type=\"monotone\" \n                    dataKey=\"battery\" \n                    stroke=\"hsl(142 76% 36%)\" \n                    strokeWidth={2}\n                    name=\"Battery Level\"\n                    dot={false}\n                  />\n                </LineChart>\n              </ResponsiveContainer>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Cost Savings Over Time */}\n        <Card data-testid=\"chart-cost-savings\">\n          <CardHeader>\n            <CardTitle>Cost Savings Over Time</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"h-64\">\n              <ResponsiveContainer width=\"100%\" height=\"100%\">\n                <BarChart data={processedData}>\n                  <CartesianGrid strokeDasharray=\"3 3\" stroke=\"hsl(217 32% 17%)\" />\n                  <XAxis \n                    dataKey=\"time\" \n                    stroke=\"hsl(215 20% 65%)\"\n                    fontSize={12}\n                    tick={{ fill: 'hsl(215 20% 65%)' }}\n                  />\n                  <YAxis \n                    stroke=\"hsl(215 20% 65%)\"\n                    fontSize={12}\n                    tick={{ fill: 'hsl(215 20% 65%)' }}\n                  />\n                  <Tooltip content={customTooltip} />\n                  <Legend wrapperStyle={{ color: 'hsl(215 20% 65%)' }} />\n                  <Bar \n                    dataKey=\"savings\" \n                    fill=\"hsl(217 91% 60%)\"\n                    name=\"Savings\"\n                  />\n                </BarChart>\n              </ResponsiveContainer>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Efficiency Metrics */}\n      <Card data-testid=\"card-efficiency-metrics\">\n        <CardHeader>\n          <CardTitle>Efficiency Metrics</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n            <div className=\"text-center\">\n              <p className=\"text-2xl font-bold text-primary\" data-testid=\"text-average-efficiency\">\n                {avgEfficiency.toFixed(1)}%\n              </p>\n              <p className=\"text-sm text-muted-foreground\">Average Efficiency</p>\n            </div>\n            \n            <div className=\"text-center\">\n              <p className=\"text-2xl font-bold text-green-400\" data-testid=\"text-self-sufficiency\">\n                {totalConsumption > 0 ? ((totalGeneration / totalConsumption) * 100).toFixed(1) : '0'}%\n              </p>\n              <p className=\"text-sm text-muted-foreground\">Self-Sufficiency</p>\n            </div>\n            \n            <div className=\"text-center\">\n              <p className=\"text-2xl font-bold text-yellow-500\" data-testid=\"text-peak-efficiency\">\n                {Math.max(...processedData.map(d => d.efficiency), 0).toFixed(1)}%\n              </p>\n              <p className=\"text-sm text-muted-foreground\">Peak Efficiency</p>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":14205},"client/src/pages/Settings.js":{"content":"import { useState } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Button } from \"@/components/ui/button\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Slider } from \"@/components/ui/slider\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Settings as SettingsIcon, Globe, Bell, Moon, Sun, Database, Wifi } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nexport default function Settings() {\n  const [darkMode, setDarkMode] = useState(true);\n  const [notifications, setNotifications] = useState(true);\n  const [autoOptimization, setAutoOptimization] = useState(true);\n  const [dataRetention, setDataRetention] = useState([30]);\n  const [refreshInterval, setRefreshInterval] = useState([5]);\n  const [language, setLanguage] = useState(\"en\");\n  const [timezone, setTimezone] = useState(\"UTC\");\n  const [alertThresholds, setAlertThresholds] = useState({\n    batteryLow: 20,\n    batteryHigh: 95,\n    temperatureHigh: 35,\n    gridLoadHigh: 85\n  });\n\n  const { toast } = useToast();\n\n  const handleSaveSettings = () => {\n    // Simulate saving settings\n    toast({\n      title: \"Settings Saved\",\n      description: \"Your preferences have been updated successfully.\",\n    });\n  };\n\n  const handleResetSettings = () => {\n    setDarkMode(true);\n    setNotifications(true);\n    setAutoOptimization(true);\n    setDataRetention([30]);\n    setRefreshInterval([5]);\n    setLanguage(\"en\");\n    setTimezone(\"UTC\");\n    setAlertThresholds({\n      batteryLow: 20,\n      batteryHigh: 95,\n      temperatureHigh: 35,\n      gridLoadHigh: 85\n    });\n    \n    toast({\n      title: \"Settings Reset\",\n      description: \"All settings have been reset to default values.\",\n    });\n  };\n\n  return (\n    <div className=\"space-y-6\" data-testid=\"page-settings\">\n      <div className=\"flex items-center justify-between\">\n        <h1 className=\"text-3xl font-bold\">Settings & Language</h1>\n        <div className=\"flex space-x-2\">\n          <Button \n            variant=\"outline\" \n            onClick={handleResetSettings}\n            data-testid=\"button-reset-settings\"\n          >\n            Reset to Default\n          </Button>\n          <Button onClick={handleSaveSettings} data-testid=\"button-save-settings\">\n            Save Changes\n          </Button>\n        </div>\n      </div>\n\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n        {/* Appearance Settings */}\n        <Card data-testid=\"card-appearance-settings\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center\">\n              <Moon className=\"w-5 h-5 mr-2\" />\n              Appearance\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <Label className=\"text-sm font-medium\">Dark Mode</Label>\n                <p className=\"text-xs text-muted-foreground\">\n                  Switch between light and dark themes\n                </p>\n              </div>\n              <Switch\n                checked={darkMode}\n                onCheckedChange={setDarkMode}\n                data-testid=\"switch-dark-mode\"\n              />\n            </div>\n\n            <Separator />\n\n            <div>\n              <Label className=\"text-sm font-medium mb-2 block\">Language</Label>\n              <Select value={language} onValueChange={setLanguage}>\n                <SelectTrigger data-testid=\"select-language\">\n                  <SelectValue placeholder=\"Select language\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"en\">English</SelectItem>\n                  <SelectItem value=\"es\">Español</SelectItem>\n                  <SelectItem value=\"fr\">Français</SelectItem>\n                  <SelectItem value=\"de\">Deutsch</SelectItem>\n                  <SelectItem value=\"zh\">中文</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n\n            <div>\n              <Label className=\"text-sm font-medium mb-2 block\">Timezone</Label>\n              <Select value={timezone} onValueChange={setTimezone}>\n                <SelectTrigger data-testid=\"select-timezone\">\n                  <SelectValue placeholder=\"Select timezone\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"UTC\">UTC</SelectItem>\n                  <SelectItem value=\"America/New_York\">Eastern Time</SelectItem>\n                  <SelectItem value=\"America/Chicago\">Central Time</SelectItem>\n                  <SelectItem value=\"America/Denver\">Mountain Time</SelectItem>\n                  <SelectItem value=\"America/Los_Angeles\">Pacific Time</SelectItem>\n                  <SelectItem value=\"Europe/London\">London</SelectItem>\n                  <SelectItem value=\"Europe/Paris\">Paris</SelectItem>\n                  <SelectItem value=\"Asia/Tokyo\">Tokyo</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Notification Settings */}\n        <Card data-testid=\"card-notification-settings\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center\">\n              <Bell className=\"w-5 h-5 mr-2\" />\n              Notifications\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <Label className=\"text-sm font-medium\">Enable Notifications</Label>\n                <p className=\"text-xs text-muted-foreground\">\n                  Receive system alerts and warnings\n                </p>\n              </div>\n              <Switch\n                checked={notifications}\n                onCheckedChange={setNotifications}\n                data-testid=\"switch-notifications\"\n              />\n            </div>\n\n            <Separator />\n\n            <div>\n              <Label className=\"text-sm font-medium mb-2 block\">\n                Battery Low Threshold: {alertThresholds.batteryLow}%\n              </Label>\n              <Slider\n                value={[alertThresholds.batteryLow]}\n                onValueChange={([value]) => setAlertThresholds(prev => ({ ...prev, batteryLow: value }))}\n                max={50}\n                min={5}\n                step={5}\n                className=\"w-full\"\n                data-testid=\"slider-battery-low-threshold\"\n              />\n            </div>\n\n            <div>\n              <Label className=\"text-sm font-medium mb-2 block\">\n                Battery High Threshold: {alertThresholds.batteryHigh}%\n              </Label>\n              <Slider\n                value={[alertThresholds.batteryHigh]}\n                onValueChange={([value]) => setAlertThresholds(prev => ({ ...prev, batteryHigh: value }))}\n                max={100}\n                min={80}\n                step={5}\n                className=\"w-full\"\n                data-testid=\"slider-battery-high-threshold\"\n              />\n            </div>\n\n            <div>\n              <Label className=\"text-sm font-medium mb-2 block\">\n                Temperature Alert: {alertThresholds.temperatureHigh}°C\n              </Label>\n              <Slider\n                value={[alertThresholds.temperatureHigh]}\n                onValueChange={([value]) => setAlertThresholds(prev => ({ ...prev, temperatureHigh: value }))}\n                max={50}\n                min={25}\n                step={1}\n                className=\"w-full\"\n                data-testid=\"slider-temperature-threshold\"\n              />\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Data Settings */}\n        <Card data-testid=\"card-data-settings\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center\">\n              <Database className=\"w-5 h-5 mr-2\" />\n              Data Management\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-6\">\n            <div>\n              <Label className=\"text-sm font-medium mb-2 block\">\n                Data Retention: {dataRetention[0]} days\n              </Label>\n              <Slider\n                value={dataRetention}\n                onValueChange={setDataRetention}\n                max={365}\n                min={7}\n                step={7}\n                className=\"w-full\"\n                data-testid=\"slider-data-retention\"\n              />\n              <p className=\"text-xs text-muted-foreground mt-1\">\n                How long to keep historical energy data\n              </p>\n            </div>\n\n            <div>\n              <Label className=\"text-sm font-medium mb-2 block\">\n                Refresh Interval: {refreshInterval[0]} seconds\n              </Label>\n              <Slider\n                value={refreshInterval}\n                onValueChange={setRefreshInterval}\n                max={60}\n                min={1}\n                step={1}\n                className=\"w-full\"\n                data-testid=\"slider-refresh-interval\"\n              />\n              <p className=\"text-xs text-muted-foreground mt-1\">\n                How often to update dashboard data\n              </p>\n            </div>\n\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <Label className=\"text-sm font-medium\">Auto Optimization</Label>\n                <p className=\"text-xs text-muted-foreground\">\n                  Automatically optimize energy distribution\n                </p>\n              </div>\n              <Switch\n                checked={autoOptimization}\n                onCheckedChange={setAutoOptimization}\n                data-testid=\"switch-auto-optimization\"\n              />\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* System Settings */}\n        <Card data-testid=\"card-system-settings\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center\">\n              <SettingsIcon className=\"w-5 h-5 mr-2\" />\n              System Configuration\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-6\">\n            <div>\n              <Label htmlFor=\"system-name\" className=\"text-sm font-medium mb-2 block\">\n                System Name\n              </Label>\n              <Input\n                id=\"system-name\"\n                defaultValue=\"EnergyFlow Home System\"\n                data-testid=\"input-system-name\"\n              />\n            </div>\n\n            <div>\n              <Label htmlFor=\"location\" className=\"text-sm font-medium mb-2 block\">\n                Location\n              </Label>\n              <Input\n                id=\"location\"\n                defaultValue=\"Home Energy System\"\n                data-testid=\"input-location\"\n              />\n            </div>\n\n            <div>\n              <Label htmlFor=\"max-power\" className=\"text-sm font-medium mb-2 block\">\n                Max Power Output (kW)\n              </Label>\n              <Input\n                id=\"max-power\"\n                type=\"number\"\n                defaultValue=\"25\"\n                data-testid=\"input-max-power\"\n              />\n            </div>\n\n            <Separator />\n\n            <div className=\"space-y-4\">\n              <h4 className=\"text-sm font-medium\">System Actions</h4>\n              <div className=\"grid grid-cols-2 gap-2\">\n                <Button variant=\"outline\" size=\"sm\" data-testid=\"button-calibrate-system\">\n                  Calibrate System\n                </Button>\n                <Button variant=\"outline\" size=\"sm\" data-testid=\"button-backup-settings\">\n                  Backup Settings\n                </Button>\n                <Button variant=\"outline\" size=\"sm\" data-testid=\"button-restore-settings\">\n                  Restore Settings\n                </Button>\n                <Button variant=\"outline\" size=\"sm\" data-testid=\"button-export-data\">\n                  Export Data\n                </Button>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Advanced Settings */}\n      <Card data-testid=\"card-advanced-settings\">\n        <CardHeader>\n          <CardTitle>Advanced Configuration</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n            <div>\n              <Label className=\"text-sm font-medium mb-2 block\">\n                Grid Load Alert: {alertThresholds.gridLoadHigh}%\n              </Label>\n              <Slider\n                value={[alertThresholds.gridLoadHigh]}\n                onValueChange={([value]) => setAlertThresholds(prev => ({ ...prev, gridLoadHigh: value }))}\n                max={100}\n                min={50}\n                step={5}\n                className=\"w-full\"\n                data-testid=\"slider-grid-load-threshold\"\n              />\n            </div>\n\n            <div>\n              <Label htmlFor=\"api-endpoint\" className=\"text-sm font-medium mb-2 block\">\n                API Endpoint\n              </Label>\n              <Input\n                id=\"api-endpoint\"\n                defaultValue=\"/api\"\n                data-testid=\"input-api-endpoint\"\n              />\n            </div>\n\n            <div>\n              <Label htmlFor=\"update-frequency\" className=\"text-sm font-medium mb-2 block\">\n                Update Frequency (ms)\n              </Label>\n              <Input\n                id=\"update-frequency\"\n                type=\"number\"\n                defaultValue=\"5000\"\n                data-testid=\"input-update-frequency\"\n              />\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":13994},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209}},"version":1}